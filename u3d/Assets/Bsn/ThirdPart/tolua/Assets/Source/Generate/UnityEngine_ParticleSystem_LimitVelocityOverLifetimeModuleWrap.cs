//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityEngine_ParticleSystem_LimitVelocityOverLifetimeModuleWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UnityEngine.ParticleSystem.LimitVelocityOverLifetimeModule), null);
		L.RegFunction("New", _CreateUnityEngine_ParticleSystem_LimitVelocityOverLifetimeModule);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("enabled", get_enabled, set_enabled);
		L.RegVar("limitX", get_limitX, set_limitX);
		L.RegVar("limitY", get_limitY, set_limitY);
		L.RegVar("limitZ", get_limitZ, set_limitZ);
		L.RegVar("limit", get_limit, set_limit);
		L.RegVar("dampen", get_dampen, set_dampen);
		L.RegVar("separateAxes", get_separateAxes, set_separateAxes);
		L.RegVar("space", get_space, set_space);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateUnityEngine_ParticleSystem_LimitVelocityOverLifetimeModule(IntPtr L)
	{
		UnityEngine.ParticleSystem.LimitVelocityOverLifetimeModule obj = new UnityEngine.ParticleSystem.LimitVelocityOverLifetimeModule();
		ToLua.PushValue(L, obj);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_enabled(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.LimitVelocityOverLifetimeModule obj = (UnityEngine.ParticleSystem.LimitVelocityOverLifetimeModule)o;
			bool ret = obj.enabled;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index enabled on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_limitX(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.LimitVelocityOverLifetimeModule obj = (UnityEngine.ParticleSystem.LimitVelocityOverLifetimeModule)o;
			UnityEngine.ParticleSystem.MinMaxCurve ret = obj.limitX;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index limitX on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_limitY(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.LimitVelocityOverLifetimeModule obj = (UnityEngine.ParticleSystem.LimitVelocityOverLifetimeModule)o;
			UnityEngine.ParticleSystem.MinMaxCurve ret = obj.limitY;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index limitY on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_limitZ(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.LimitVelocityOverLifetimeModule obj = (UnityEngine.ParticleSystem.LimitVelocityOverLifetimeModule)o;
			UnityEngine.ParticleSystem.MinMaxCurve ret = obj.limitZ;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index limitZ on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_limit(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.LimitVelocityOverLifetimeModule obj = (UnityEngine.ParticleSystem.LimitVelocityOverLifetimeModule)o;
			UnityEngine.ParticleSystem.MinMaxCurve ret = obj.limit;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index limit on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_dampen(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.LimitVelocityOverLifetimeModule obj = (UnityEngine.ParticleSystem.LimitVelocityOverLifetimeModule)o;
			float ret = obj.dampen;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index dampen on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_separateAxes(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.LimitVelocityOverLifetimeModule obj = (UnityEngine.ParticleSystem.LimitVelocityOverLifetimeModule)o;
			bool ret = obj.separateAxes;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index separateAxes on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_space(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.LimitVelocityOverLifetimeModule obj = (UnityEngine.ParticleSystem.LimitVelocityOverLifetimeModule)o;
			UnityEngine.ParticleSystemSimulationSpace ret = obj.space;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index space on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_enabled(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.LimitVelocityOverLifetimeModule obj = (UnityEngine.ParticleSystem.LimitVelocityOverLifetimeModule)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.enabled = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index enabled on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_limitX(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.LimitVelocityOverLifetimeModule obj = (UnityEngine.ParticleSystem.LimitVelocityOverLifetimeModule)o;
			UnityEngine.ParticleSystem.MinMaxCurve arg0 = (UnityEngine.ParticleSystem.MinMaxCurve)ToLua.CheckObject(L, 2, typeof(UnityEngine.ParticleSystem.MinMaxCurve));
			obj.limitX = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index limitX on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_limitY(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.LimitVelocityOverLifetimeModule obj = (UnityEngine.ParticleSystem.LimitVelocityOverLifetimeModule)o;
			UnityEngine.ParticleSystem.MinMaxCurve arg0 = (UnityEngine.ParticleSystem.MinMaxCurve)ToLua.CheckObject(L, 2, typeof(UnityEngine.ParticleSystem.MinMaxCurve));
			obj.limitY = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index limitY on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_limitZ(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.LimitVelocityOverLifetimeModule obj = (UnityEngine.ParticleSystem.LimitVelocityOverLifetimeModule)o;
			UnityEngine.ParticleSystem.MinMaxCurve arg0 = (UnityEngine.ParticleSystem.MinMaxCurve)ToLua.CheckObject(L, 2, typeof(UnityEngine.ParticleSystem.MinMaxCurve));
			obj.limitZ = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index limitZ on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_limit(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.LimitVelocityOverLifetimeModule obj = (UnityEngine.ParticleSystem.LimitVelocityOverLifetimeModule)o;
			UnityEngine.ParticleSystem.MinMaxCurve arg0 = (UnityEngine.ParticleSystem.MinMaxCurve)ToLua.CheckObject(L, 2, typeof(UnityEngine.ParticleSystem.MinMaxCurve));
			obj.limit = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index limit on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_dampen(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.LimitVelocityOverLifetimeModule obj = (UnityEngine.ParticleSystem.LimitVelocityOverLifetimeModule)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.dampen = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index dampen on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_separateAxes(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.LimitVelocityOverLifetimeModule obj = (UnityEngine.ParticleSystem.LimitVelocityOverLifetimeModule)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.separateAxes = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index separateAxes on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_space(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.LimitVelocityOverLifetimeModule obj = (UnityEngine.ParticleSystem.LimitVelocityOverLifetimeModule)o;
			UnityEngine.ParticleSystemSimulationSpace arg0 = (UnityEngine.ParticleSystemSimulationSpace)ToLua.CheckObject(L, 2, typeof(UnityEngine.ParticleSystemSimulationSpace));
			obj.space = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index space on a nil value" : e.Message);
		}
	}
}

