//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityEngine_LightmapSettingsWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UnityEngine.LightmapSettings), typeof(UnityEngine.Object));
		L.RegFunction("New", _CreateUnityEngine_LightmapSettings);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("lightmaps", get_lightmaps, set_lightmaps);
		L.RegVar("lightmapsMode", get_lightmapsMode, set_lightmapsMode);
		L.RegVar("lightProbes", get_lightProbes, set_lightProbes);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateUnityEngine_LightmapSettings(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				UnityEngine.LightmapSettings obj = new UnityEngine.LightmapSettings();
				ToLua.Push(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: UnityEngine.LightmapSettings.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_lightmaps(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UnityEngine.LightmapSettings.lightmaps);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_lightmapsMode(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UnityEngine.LightmapSettings.lightmapsMode);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_lightProbes(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UnityEngine.LightmapSettings.lightProbes);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_lightmaps(IntPtr L)
	{
		try
		{
			UnityEngine.LightmapData[] arg0 = ToLua.CheckObjectArray<UnityEngine.LightmapData>(L, 2);
			UnityEngine.LightmapSettings.lightmaps = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_lightmapsMode(IntPtr L)
	{
		try
		{
			UnityEngine.LightmapsMode arg0 = (UnityEngine.LightmapsMode)ToLua.CheckObject(L, 2, typeof(UnityEngine.LightmapsMode));
			UnityEngine.LightmapSettings.lightmapsMode = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_lightProbes(IntPtr L)
	{
		try
		{
			UnityEngine.LightProbes arg0 = (UnityEngine.LightProbes)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.LightProbes));
			UnityEngine.LightmapSettings.lightProbes = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

