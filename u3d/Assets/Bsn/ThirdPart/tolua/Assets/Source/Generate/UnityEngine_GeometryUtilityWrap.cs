//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityEngine_GeometryUtilityWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UnityEngine.GeometryUtility), typeof(System.Object));
		L.RegFunction("CalculateFrustumPlanes", CalculateFrustumPlanes);
		L.RegFunction("TestPlanesAABB", TestPlanesAABB);
		L.RegFunction("New", _CreateUnityEngine_GeometryUtility);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateUnityEngine_GeometryUtility(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				UnityEngine.GeometryUtility obj = new UnityEngine.GeometryUtility();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: UnityEngine.GeometryUtility.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CalculateFrustumPlanes(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(UnityEngine.Matrix4x4)))
			{
				UnityEngine.Matrix4x4 arg0 = (UnityEngine.Matrix4x4)ToLua.ToObject(L, 1);
				UnityEngine.Plane[] o = UnityEngine.GeometryUtility.CalculateFrustumPlanes(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(UnityEngine.Camera)))
			{
				UnityEngine.Camera arg0 = (UnityEngine.Camera)ToLua.ToObject(L, 1);
				UnityEngine.Plane[] o = UnityEngine.GeometryUtility.CalculateFrustumPlanes(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.GeometryUtility.CalculateFrustumPlanes");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TestPlanesAABB(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Plane[] arg0 = ToLua.CheckObjectArray<UnityEngine.Plane>(L, 1);
			UnityEngine.Bounds arg1 = ToLua.ToBounds(L, 2);
			bool o = UnityEngine.GeometryUtility.TestPlanesAABB(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

