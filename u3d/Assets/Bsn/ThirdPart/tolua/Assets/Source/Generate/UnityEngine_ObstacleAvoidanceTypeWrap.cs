//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityEngine_ObstacleAvoidanceTypeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(UnityEngine.ObstacleAvoidanceType));
		L.RegVar("NoObstacleAvoidance", get_NoObstacleAvoidance, null);
		L.RegVar("LowQualityObstacleAvoidance", get_LowQualityObstacleAvoidance, null);
		L.RegVar("MedQualityObstacleAvoidance", get_MedQualityObstacleAvoidance, null);
		L.RegVar("GoodQualityObstacleAvoidance", get_GoodQualityObstacleAvoidance, null);
		L.RegVar("HighQualityObstacleAvoidance", get_HighQualityObstacleAvoidance, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NoObstacleAvoidance(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.ObstacleAvoidanceType.NoObstacleAvoidance);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LowQualityObstacleAvoidance(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.ObstacleAvoidanceType.LowQualityObstacleAvoidance);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MedQualityObstacleAvoidance(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.ObstacleAvoidanceType.MedQualityObstacleAvoidance);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_GoodQualityObstacleAvoidance(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.ObstacleAvoidanceType.GoodQualityObstacleAvoidance);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HighQualityObstacleAvoidance(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.ObstacleAvoidanceType.HighQualityObstacleAvoidance);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		UnityEngine.ObstacleAvoidanceType o = (UnityEngine.ObstacleAvoidanceType)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

