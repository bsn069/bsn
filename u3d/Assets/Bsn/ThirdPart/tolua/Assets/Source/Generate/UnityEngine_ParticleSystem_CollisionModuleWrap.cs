//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityEngine_ParticleSystem_CollisionModuleWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UnityEngine.ParticleSystem.CollisionModule), null);
		L.RegFunction("SetPlane", SetPlane);
		L.RegFunction("GetPlane", GetPlane);
		L.RegFunction("New", _CreateUnityEngine_ParticleSystem_CollisionModule);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("enabled", get_enabled, set_enabled);
		L.RegVar("type", get_type, set_type);
		L.RegVar("mode", get_mode, set_mode);
		L.RegVar("dampen", get_dampen, set_dampen);
		L.RegVar("bounce", get_bounce, set_bounce);
		L.RegVar("lifetimeLoss", get_lifetimeLoss, set_lifetimeLoss);
		L.RegVar("minKillSpeed", get_minKillSpeed, set_minKillSpeed);
		L.RegVar("collidesWith", get_collidesWith, set_collidesWith);
		L.RegVar("enableDynamicColliders", get_enableDynamicColliders, set_enableDynamicColliders);
		L.RegVar("enableInteriorCollisions", get_enableInteriorCollisions, set_enableInteriorCollisions);
		L.RegVar("maxCollisionShapes", get_maxCollisionShapes, set_maxCollisionShapes);
		L.RegVar("quality", get_quality, set_quality);
		L.RegVar("voxelSize", get_voxelSize, set_voxelSize);
		L.RegVar("radiusScale", get_radiusScale, set_radiusScale);
		L.RegVar("sendCollisionMessages", get_sendCollisionMessages, set_sendCollisionMessages);
		L.RegVar("maxPlaneCount", get_maxPlaneCount, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateUnityEngine_ParticleSystem_CollisionModule(IntPtr L)
	{
		UnityEngine.ParticleSystem.CollisionModule obj = new UnityEngine.ParticleSystem.CollisionModule();
		ToLua.PushValue(L, obj);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetPlane(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityEngine.ParticleSystem.CollisionModule obj = (UnityEngine.ParticleSystem.CollisionModule)ToLua.CheckObject(L, 1, typeof(UnityEngine.ParticleSystem.CollisionModule));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Transform arg1 = (UnityEngine.Transform)ToLua.CheckUnityObject(L, 3, typeof(UnityEngine.Transform));
			obj.SetPlane(arg0, arg1);
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPlane(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.ParticleSystem.CollisionModule obj = (UnityEngine.ParticleSystem.CollisionModule)ToLua.CheckObject(L, 1, typeof(UnityEngine.ParticleSystem.CollisionModule));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Transform o = obj.GetPlane(arg0);
			ToLua.Push(L, o);
			ToLua.SetBack(L, 1, obj);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_enabled(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.CollisionModule obj = (UnityEngine.ParticleSystem.CollisionModule)o;
			bool ret = obj.enabled;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index enabled on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_type(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.CollisionModule obj = (UnityEngine.ParticleSystem.CollisionModule)o;
			UnityEngine.ParticleSystemCollisionType ret = obj.type;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index type on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.CollisionModule obj = (UnityEngine.ParticleSystem.CollisionModule)o;
			UnityEngine.ParticleSystemCollisionMode ret = obj.mode;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mode on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_dampen(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.CollisionModule obj = (UnityEngine.ParticleSystem.CollisionModule)o;
			UnityEngine.ParticleSystem.MinMaxCurve ret = obj.dampen;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index dampen on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_bounce(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.CollisionModule obj = (UnityEngine.ParticleSystem.CollisionModule)o;
			UnityEngine.ParticleSystem.MinMaxCurve ret = obj.bounce;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index bounce on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_lifetimeLoss(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.CollisionModule obj = (UnityEngine.ParticleSystem.CollisionModule)o;
			UnityEngine.ParticleSystem.MinMaxCurve ret = obj.lifetimeLoss;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index lifetimeLoss on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_minKillSpeed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.CollisionModule obj = (UnityEngine.ParticleSystem.CollisionModule)o;
			float ret = obj.minKillSpeed;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index minKillSpeed on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_collidesWith(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.CollisionModule obj = (UnityEngine.ParticleSystem.CollisionModule)o;
			UnityEngine.LayerMask ret = obj.collidesWith;
			ToLua.PushLayerMask(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index collidesWith on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_enableDynamicColliders(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.CollisionModule obj = (UnityEngine.ParticleSystem.CollisionModule)o;
			bool ret = obj.enableDynamicColliders;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index enableDynamicColliders on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_enableInteriorCollisions(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.CollisionModule obj = (UnityEngine.ParticleSystem.CollisionModule)o;
			bool ret = obj.enableInteriorCollisions;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index enableInteriorCollisions on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_maxCollisionShapes(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.CollisionModule obj = (UnityEngine.ParticleSystem.CollisionModule)o;
			int ret = obj.maxCollisionShapes;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index maxCollisionShapes on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_quality(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.CollisionModule obj = (UnityEngine.ParticleSystem.CollisionModule)o;
			UnityEngine.ParticleSystemCollisionQuality ret = obj.quality;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index quality on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_voxelSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.CollisionModule obj = (UnityEngine.ParticleSystem.CollisionModule)o;
			float ret = obj.voxelSize;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index voxelSize on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_radiusScale(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.CollisionModule obj = (UnityEngine.ParticleSystem.CollisionModule)o;
			float ret = obj.radiusScale;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index radiusScale on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_sendCollisionMessages(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.CollisionModule obj = (UnityEngine.ParticleSystem.CollisionModule)o;
			bool ret = obj.sendCollisionMessages;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index sendCollisionMessages on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_maxPlaneCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.CollisionModule obj = (UnityEngine.ParticleSystem.CollisionModule)o;
			int ret = obj.maxPlaneCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index maxPlaneCount on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_enabled(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.CollisionModule obj = (UnityEngine.ParticleSystem.CollisionModule)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.enabled = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index enabled on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_type(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.CollisionModule obj = (UnityEngine.ParticleSystem.CollisionModule)o;
			UnityEngine.ParticleSystemCollisionType arg0 = (UnityEngine.ParticleSystemCollisionType)ToLua.CheckObject(L, 2, typeof(UnityEngine.ParticleSystemCollisionType));
			obj.type = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index type on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.CollisionModule obj = (UnityEngine.ParticleSystem.CollisionModule)o;
			UnityEngine.ParticleSystemCollisionMode arg0 = (UnityEngine.ParticleSystemCollisionMode)ToLua.CheckObject(L, 2, typeof(UnityEngine.ParticleSystemCollisionMode));
			obj.mode = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mode on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_dampen(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.CollisionModule obj = (UnityEngine.ParticleSystem.CollisionModule)o;
			UnityEngine.ParticleSystem.MinMaxCurve arg0 = (UnityEngine.ParticleSystem.MinMaxCurve)ToLua.CheckObject(L, 2, typeof(UnityEngine.ParticleSystem.MinMaxCurve));
			obj.dampen = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index dampen on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_bounce(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.CollisionModule obj = (UnityEngine.ParticleSystem.CollisionModule)o;
			UnityEngine.ParticleSystem.MinMaxCurve arg0 = (UnityEngine.ParticleSystem.MinMaxCurve)ToLua.CheckObject(L, 2, typeof(UnityEngine.ParticleSystem.MinMaxCurve));
			obj.bounce = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index bounce on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_lifetimeLoss(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.CollisionModule obj = (UnityEngine.ParticleSystem.CollisionModule)o;
			UnityEngine.ParticleSystem.MinMaxCurve arg0 = (UnityEngine.ParticleSystem.MinMaxCurve)ToLua.CheckObject(L, 2, typeof(UnityEngine.ParticleSystem.MinMaxCurve));
			obj.lifetimeLoss = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index lifetimeLoss on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_minKillSpeed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.CollisionModule obj = (UnityEngine.ParticleSystem.CollisionModule)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.minKillSpeed = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index minKillSpeed on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_collidesWith(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.CollisionModule obj = (UnityEngine.ParticleSystem.CollisionModule)o;
			UnityEngine.LayerMask arg0 = ToLua.ToLayerMask(L, 2);
			obj.collidesWith = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index collidesWith on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_enableDynamicColliders(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.CollisionModule obj = (UnityEngine.ParticleSystem.CollisionModule)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.enableDynamicColliders = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index enableDynamicColliders on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_enableInteriorCollisions(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.CollisionModule obj = (UnityEngine.ParticleSystem.CollisionModule)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.enableInteriorCollisions = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index enableInteriorCollisions on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_maxCollisionShapes(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.CollisionModule obj = (UnityEngine.ParticleSystem.CollisionModule)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.maxCollisionShapes = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index maxCollisionShapes on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_quality(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.CollisionModule obj = (UnityEngine.ParticleSystem.CollisionModule)o;
			UnityEngine.ParticleSystemCollisionQuality arg0 = (UnityEngine.ParticleSystemCollisionQuality)ToLua.CheckObject(L, 2, typeof(UnityEngine.ParticleSystemCollisionQuality));
			obj.quality = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index quality on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_voxelSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.CollisionModule obj = (UnityEngine.ParticleSystem.CollisionModule)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.voxelSize = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index voxelSize on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_radiusScale(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.CollisionModule obj = (UnityEngine.ParticleSystem.CollisionModule)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.radiusScale = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index radiusScale on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_sendCollisionMessages(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.CollisionModule obj = (UnityEngine.ParticleSystem.CollisionModule)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.sendCollisionMessages = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index sendCollisionMessages on a nil value" : e.Message);
		}
	}
}

