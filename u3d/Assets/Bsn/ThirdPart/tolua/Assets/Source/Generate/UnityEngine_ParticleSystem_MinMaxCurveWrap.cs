//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityEngine_ParticleSystem_MinMaxCurveWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UnityEngine.ParticleSystem.MinMaxCurve), null);
		L.RegFunction("New", _CreateUnityEngine_ParticleSystem_MinMaxCurve);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("mode", get_mode, set_mode);
		L.RegVar("curveScalar", get_curveScalar, set_curveScalar);
		L.RegVar("curveMax", get_curveMax, set_curveMax);
		L.RegVar("curveMin", get_curveMin, set_curveMin);
		L.RegVar("constantMax", get_constantMax, set_constantMax);
		L.RegVar("constantMin", get_constantMin, set_constantMin);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateUnityEngine_ParticleSystem_MinMaxCurve(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
				UnityEngine.ParticleSystem.MinMaxCurve obj = new UnityEngine.ParticleSystem.MinMaxCurve(arg0);
				ToLua.PushValue(L, obj);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(float), typeof(float)))
			{
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
				float arg1 = (float)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.ParticleSystem.MinMaxCurve obj = new UnityEngine.ParticleSystem.MinMaxCurve(arg0, arg1);
				ToLua.PushValue(L, obj);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(float), typeof(UnityEngine.AnimationCurve)))
			{
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
				UnityEngine.AnimationCurve arg1 = (UnityEngine.AnimationCurve)ToLua.CheckObject(L, 2, typeof(UnityEngine.AnimationCurve));
				UnityEngine.ParticleSystem.MinMaxCurve obj = new UnityEngine.ParticleSystem.MinMaxCurve(arg0, arg1);
				ToLua.PushValue(L, obj);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(float), typeof(UnityEngine.AnimationCurve), typeof(UnityEngine.AnimationCurve)))
			{
				float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
				UnityEngine.AnimationCurve arg1 = (UnityEngine.AnimationCurve)ToLua.CheckObject(L, 2, typeof(UnityEngine.AnimationCurve));
				UnityEngine.AnimationCurve arg2 = (UnityEngine.AnimationCurve)ToLua.CheckObject(L, 3, typeof(UnityEngine.AnimationCurve));
				UnityEngine.ParticleSystem.MinMaxCurve obj = new UnityEngine.ParticleSystem.MinMaxCurve(arg0, arg1, arg2);
				ToLua.PushValue(L, obj);
				return 1;
			}
			else if (count == 0)
			{
				UnityEngine.ParticleSystem.MinMaxCurve obj = new UnityEngine.ParticleSystem.MinMaxCurve();
				ToLua.PushValue(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: UnityEngine.ParticleSystem.MinMaxCurve.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.MinMaxCurve obj = (UnityEngine.ParticleSystem.MinMaxCurve)o;
			UnityEngine.ParticleSystemCurveMode ret = obj.mode;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mode on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_curveScalar(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.MinMaxCurve obj = (UnityEngine.ParticleSystem.MinMaxCurve)o;
			float ret = obj.curveScalar;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index curveScalar on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_curveMax(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.MinMaxCurve obj = (UnityEngine.ParticleSystem.MinMaxCurve)o;
			UnityEngine.AnimationCurve ret = obj.curveMax;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index curveMax on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_curveMin(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.MinMaxCurve obj = (UnityEngine.ParticleSystem.MinMaxCurve)o;
			UnityEngine.AnimationCurve ret = obj.curveMin;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index curveMin on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_constantMax(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.MinMaxCurve obj = (UnityEngine.ParticleSystem.MinMaxCurve)o;
			float ret = obj.constantMax;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index constantMax on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_constantMin(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.MinMaxCurve obj = (UnityEngine.ParticleSystem.MinMaxCurve)o;
			float ret = obj.constantMin;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index constantMin on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.MinMaxCurve obj = (UnityEngine.ParticleSystem.MinMaxCurve)o;
			UnityEngine.ParticleSystemCurveMode arg0 = (UnityEngine.ParticleSystemCurveMode)ToLua.CheckObject(L, 2, typeof(UnityEngine.ParticleSystemCurveMode));
			obj.mode = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index mode on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_curveScalar(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.MinMaxCurve obj = (UnityEngine.ParticleSystem.MinMaxCurve)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.curveScalar = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index curveScalar on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_curveMax(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.MinMaxCurve obj = (UnityEngine.ParticleSystem.MinMaxCurve)o;
			UnityEngine.AnimationCurve arg0 = (UnityEngine.AnimationCurve)ToLua.CheckObject(L, 2, typeof(UnityEngine.AnimationCurve));
			obj.curveMax = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index curveMax on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_curveMin(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.MinMaxCurve obj = (UnityEngine.ParticleSystem.MinMaxCurve)o;
			UnityEngine.AnimationCurve arg0 = (UnityEngine.AnimationCurve)ToLua.CheckObject(L, 2, typeof(UnityEngine.AnimationCurve));
			obj.curveMin = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index curveMin on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_constantMax(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.MinMaxCurve obj = (UnityEngine.ParticleSystem.MinMaxCurve)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.constantMax = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index constantMax on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_constantMin(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.MinMaxCurve obj = (UnityEngine.ParticleSystem.MinMaxCurve)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.constantMin = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index constantMin on a nil value" : e.Message);
		}
	}
}

