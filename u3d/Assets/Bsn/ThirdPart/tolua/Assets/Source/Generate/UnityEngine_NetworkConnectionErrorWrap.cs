//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityEngine_NetworkConnectionErrorWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(UnityEngine.NetworkConnectionError));
		L.RegVar("NoError", get_NoError, null);
		L.RegVar("RSAPublicKeyMismatch", get_RSAPublicKeyMismatch, null);
		L.RegVar("InvalidPassword", get_InvalidPassword, null);
		L.RegVar("ConnectionFailed", get_ConnectionFailed, null);
		L.RegVar("TooManyConnectedPlayers", get_TooManyConnectedPlayers, null);
		L.RegVar("ConnectionBanned", get_ConnectionBanned, null);
		L.RegVar("AlreadyConnectedToServer", get_AlreadyConnectedToServer, null);
		L.RegVar("AlreadyConnectedToAnotherServer", get_AlreadyConnectedToAnotherServer, null);
		L.RegVar("CreateSocketOrThreadFailure", get_CreateSocketOrThreadFailure, null);
		L.RegVar("IncorrectParameters", get_IncorrectParameters, null);
		L.RegVar("EmptyConnectTarget", get_EmptyConnectTarget, null);
		L.RegVar("InternalDirectConnectFailed", get_InternalDirectConnectFailed, null);
		L.RegVar("NATTargetNotConnected", get_NATTargetNotConnected, null);
		L.RegVar("NATTargetConnectionLost", get_NATTargetConnectionLost, null);
		L.RegVar("NATPunchthroughFailed", get_NATPunchthroughFailed, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NoError(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.NetworkConnectionError.NoError);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RSAPublicKeyMismatch(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.NetworkConnectionError.RSAPublicKeyMismatch);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_InvalidPassword(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.NetworkConnectionError.InvalidPassword);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ConnectionFailed(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.NetworkConnectionError.ConnectionFailed);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_TooManyConnectedPlayers(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.NetworkConnectionError.TooManyConnectedPlayers);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ConnectionBanned(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.NetworkConnectionError.ConnectionBanned);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AlreadyConnectedToServer(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.NetworkConnectionError.AlreadyConnectedToServer);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_AlreadyConnectedToAnotherServer(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.NetworkConnectionError.AlreadyConnectedToAnotherServer);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CreateSocketOrThreadFailure(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.NetworkConnectionError.CreateSocketOrThreadFailure);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IncorrectParameters(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.NetworkConnectionError.IncorrectParameters);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_EmptyConnectTarget(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.NetworkConnectionError.EmptyConnectTarget);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_InternalDirectConnectFailed(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.NetworkConnectionError.InternalDirectConnectFailed);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NATTargetNotConnected(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.NetworkConnectionError.NATTargetNotConnected);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NATTargetConnectionLost(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.NetworkConnectionError.NATTargetConnectionLost);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NATPunchthroughFailed(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.NetworkConnectionError.NATPunchthroughFailed);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		UnityEngine.NetworkConnectionError o = (UnityEngine.NetworkConnectionError)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

