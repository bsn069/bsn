//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityEngine_ParticleSystem_EmissionModuleWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UnityEngine.ParticleSystem.EmissionModule), null);
		L.RegFunction("SetBursts", SetBursts);
		L.RegFunction("GetBursts", GetBursts);
		L.RegFunction("New", _CreateUnityEngine_ParticleSystem_EmissionModule);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("enabled", get_enabled, set_enabled);
		L.RegVar("rate", get_rate, set_rate);
		L.RegVar("type", get_type, set_type);
		L.RegVar("burstCount", get_burstCount, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateUnityEngine_ParticleSystem_EmissionModule(IntPtr L)
	{
		UnityEngine.ParticleSystem.EmissionModule obj = new UnityEngine.ParticleSystem.EmissionModule();
		ToLua.PushValue(L, obj);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetBursts(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UnityEngine.ParticleSystem.EmissionModule), typeof(UnityEngine.ParticleSystem.Burst[])))
			{
				UnityEngine.ParticleSystem.EmissionModule obj = (UnityEngine.ParticleSystem.EmissionModule)ToLua.ToObject(L, 1);
				UnityEngine.ParticleSystem.Burst[] arg0 = ToLua.CheckObjectArray<UnityEngine.ParticleSystem.Burst>(L, 2);
				obj.SetBursts(arg0);
				ToLua.SetBack(L, 1, obj);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UnityEngine.ParticleSystem.EmissionModule), typeof(UnityEngine.ParticleSystem.Burst[]), typeof(int)))
			{
				UnityEngine.ParticleSystem.EmissionModule obj = (UnityEngine.ParticleSystem.EmissionModule)ToLua.ToObject(L, 1);
				UnityEngine.ParticleSystem.Burst[] arg0 = ToLua.CheckObjectArray<UnityEngine.ParticleSystem.Burst>(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				obj.SetBursts(arg0, arg1);
				ToLua.SetBack(L, 1, obj);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.ParticleSystem.EmissionModule.SetBursts");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBursts(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.ParticleSystem.EmissionModule obj = (UnityEngine.ParticleSystem.EmissionModule)ToLua.CheckObject(L, 1, typeof(UnityEngine.ParticleSystem.EmissionModule));
			UnityEngine.ParticleSystem.Burst[] arg0 = ToLua.CheckObjectArray<UnityEngine.ParticleSystem.Burst>(L, 2);
			int o = obj.GetBursts(arg0);
			LuaDLL.lua_pushinteger(L, o);
			ToLua.SetBack(L, 1, obj);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_enabled(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.EmissionModule obj = (UnityEngine.ParticleSystem.EmissionModule)o;
			bool ret = obj.enabled;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index enabled on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_rate(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.EmissionModule obj = (UnityEngine.ParticleSystem.EmissionModule)o;
			UnityEngine.ParticleSystem.MinMaxCurve ret = obj.rate;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index rate on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_type(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.EmissionModule obj = (UnityEngine.ParticleSystem.EmissionModule)o;
			UnityEngine.ParticleSystemEmissionType ret = obj.type;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index type on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_burstCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.EmissionModule obj = (UnityEngine.ParticleSystem.EmissionModule)o;
			int ret = obj.burstCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index burstCount on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_enabled(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.EmissionModule obj = (UnityEngine.ParticleSystem.EmissionModule)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.enabled = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index enabled on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_rate(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.EmissionModule obj = (UnityEngine.ParticleSystem.EmissionModule)o;
			UnityEngine.ParticleSystem.MinMaxCurve arg0 = (UnityEngine.ParticleSystem.MinMaxCurve)ToLua.CheckObject(L, 2, typeof(UnityEngine.ParticleSystem.MinMaxCurve));
			obj.rate = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index rate on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_type(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleSystem.EmissionModule obj = (UnityEngine.ParticleSystem.EmissionModule)o;
			UnityEngine.ParticleSystemEmissionType arg0 = (UnityEngine.ParticleSystemEmissionType)ToLua.CheckObject(L, 2, typeof(UnityEngine.ParticleSystemEmissionType));
			obj.type = arg0;
			ToLua.SetBack(L, 1, obj);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index type on a nil value" : e.Message);
		}
	}
}

