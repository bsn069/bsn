//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityEngine_Networking_Match_NetworkMatchWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UnityEngine.Networking.Match.NetworkMatch), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("SetProgramAppID", SetProgramAppID);
		L.RegFunction("CreateMatch", CreateMatch);
		L.RegFunction("JoinMatch", JoinMatch);
		L.RegFunction("DestroyMatch", DestroyMatch);
		L.RegFunction("DropConnection", DropConnection);
		L.RegFunction("ListMatches", ListMatches);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("baseUri", get_baseUri, set_baseUri);
		L.RegFunction("ResponseDelegate_UnityEngine_Networking_Match_CreateMatchResponse", UnityEngine_Networking_Match_NetworkMatch_ResponseDelegate_UnityEngine_Networking_Match_CreateMatchResponse);
		L.RegFunction("ResponseDelegate_UnityEngine_Networking_Match_JoinMatchResponse", UnityEngine_Networking_Match_NetworkMatch_ResponseDelegate_UnityEngine_Networking_Match_JoinMatchResponse);
		L.RegFunction("ResponseDelegate_UnityEngine_Networking_Match_BasicResponse", UnityEngine_Networking_Match_NetworkMatch_ResponseDelegate_UnityEngine_Networking_Match_BasicResponse);
		L.RegFunction("ResponseDelegate_UnityEngine_Networking_Match_ListMatchResponse", UnityEngine_Networking_Match_NetworkMatch_ResponseDelegate_UnityEngine_Networking_Match_ListMatchResponse);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetProgramAppID(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Networking.Match.NetworkMatch obj = (UnityEngine.Networking.Match.NetworkMatch)ToLua.CheckObject(L, 1, typeof(UnityEngine.Networking.Match.NetworkMatch));
			UnityEngine.Networking.Types.AppID arg0 = (UnityEngine.Networking.Types.AppID)ToLua.CheckObject(L, 2, typeof(UnityEngine.Networking.Types.AppID));
			obj.SetProgramAppID(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateMatch(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UnityEngine.Networking.Match.NetworkMatch), typeof(UnityEngine.Networking.Match.CreateMatchRequest), typeof(UnityEngine.Networking.Match.NetworkMatch.ResponseDelegate<UnityEngine.Networking.Match.CreateMatchResponse>)))
			{
				UnityEngine.Networking.Match.NetworkMatch obj = (UnityEngine.Networking.Match.NetworkMatch)ToLua.ToObject(L, 1);
				UnityEngine.Networking.Match.CreateMatchRequest arg0 = (UnityEngine.Networking.Match.CreateMatchRequest)ToLua.ToObject(L, 2);
				UnityEngine.Networking.Match.NetworkMatch.ResponseDelegate<UnityEngine.Networking.Match.CreateMatchResponse> arg1 = null;
				LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

				if (funcType3 != LuaTypes.LUA_TFUNCTION)
				{
					 arg1 = (UnityEngine.Networking.Match.NetworkMatch.ResponseDelegate<UnityEngine.Networking.Match.CreateMatchResponse>)ToLua.ToObject(L, 3);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 3);
					arg1 = DelegateFactory.CreateDelegate(typeof(UnityEngine.Networking.Match.NetworkMatch.ResponseDelegate<UnityEngine.Networking.Match.CreateMatchResponse>), func) as UnityEngine.Networking.Match.NetworkMatch.ResponseDelegate<UnityEngine.Networking.Match.CreateMatchResponse>;
				}

				UnityEngine.Coroutine o = obj.CreateMatch(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 6 && TypeChecker.CheckTypes(L, 1, typeof(UnityEngine.Networking.Match.NetworkMatch), typeof(string), typeof(uint), typeof(bool), typeof(string), typeof(UnityEngine.Networking.Match.NetworkMatch.ResponseDelegate<UnityEngine.Networking.Match.CreateMatchResponse>)))
			{
				UnityEngine.Networking.Match.NetworkMatch obj = (UnityEngine.Networking.Match.NetworkMatch)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				uint arg1 = (uint)LuaDLL.lua_tonumber(L, 3);
				bool arg2 = LuaDLL.lua_toboolean(L, 4);
				string arg3 = ToLua.ToString(L, 5);
				UnityEngine.Networking.Match.NetworkMatch.ResponseDelegate<UnityEngine.Networking.Match.CreateMatchResponse> arg4 = null;
				LuaTypes funcType6 = LuaDLL.lua_type(L, 6);

				if (funcType6 != LuaTypes.LUA_TFUNCTION)
				{
					 arg4 = (UnityEngine.Networking.Match.NetworkMatch.ResponseDelegate<UnityEngine.Networking.Match.CreateMatchResponse>)ToLua.ToObject(L, 6);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 6);
					arg4 = DelegateFactory.CreateDelegate(typeof(UnityEngine.Networking.Match.NetworkMatch.ResponseDelegate<UnityEngine.Networking.Match.CreateMatchResponse>), func) as UnityEngine.Networking.Match.NetworkMatch.ResponseDelegate<UnityEngine.Networking.Match.CreateMatchResponse>;
				}

				UnityEngine.Coroutine o = obj.CreateMatch(arg0, arg1, arg2, arg3, arg4);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Networking.Match.NetworkMatch.CreateMatch");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int JoinMatch(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UnityEngine.Networking.Match.NetworkMatch), typeof(UnityEngine.Networking.Match.JoinMatchRequest), typeof(UnityEngine.Networking.Match.NetworkMatch.ResponseDelegate<UnityEngine.Networking.Match.JoinMatchResponse>)))
			{
				UnityEngine.Networking.Match.NetworkMatch obj = (UnityEngine.Networking.Match.NetworkMatch)ToLua.ToObject(L, 1);
				UnityEngine.Networking.Match.JoinMatchRequest arg0 = (UnityEngine.Networking.Match.JoinMatchRequest)ToLua.ToObject(L, 2);
				UnityEngine.Networking.Match.NetworkMatch.ResponseDelegate<UnityEngine.Networking.Match.JoinMatchResponse> arg1 = null;
				LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

				if (funcType3 != LuaTypes.LUA_TFUNCTION)
				{
					 arg1 = (UnityEngine.Networking.Match.NetworkMatch.ResponseDelegate<UnityEngine.Networking.Match.JoinMatchResponse>)ToLua.ToObject(L, 3);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 3);
					arg1 = DelegateFactory.CreateDelegate(typeof(UnityEngine.Networking.Match.NetworkMatch.ResponseDelegate<UnityEngine.Networking.Match.JoinMatchResponse>), func) as UnityEngine.Networking.Match.NetworkMatch.ResponseDelegate<UnityEngine.Networking.Match.JoinMatchResponse>;
				}

				UnityEngine.Coroutine o = obj.JoinMatch(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(UnityEngine.Networking.Match.NetworkMatch), typeof(UnityEngine.Networking.Types.NetworkID), typeof(string), typeof(UnityEngine.Networking.Match.NetworkMatch.ResponseDelegate<UnityEngine.Networking.Match.JoinMatchResponse>)))
			{
				UnityEngine.Networking.Match.NetworkMatch obj = (UnityEngine.Networking.Match.NetworkMatch)ToLua.ToObject(L, 1);
				UnityEngine.Networking.Types.NetworkID arg0 = (UnityEngine.Networking.Types.NetworkID)ToLua.ToObject(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				UnityEngine.Networking.Match.NetworkMatch.ResponseDelegate<UnityEngine.Networking.Match.JoinMatchResponse> arg2 = null;
				LuaTypes funcType4 = LuaDLL.lua_type(L, 4);

				if (funcType4 != LuaTypes.LUA_TFUNCTION)
				{
					 arg2 = (UnityEngine.Networking.Match.NetworkMatch.ResponseDelegate<UnityEngine.Networking.Match.JoinMatchResponse>)ToLua.ToObject(L, 4);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 4);
					arg2 = DelegateFactory.CreateDelegate(typeof(UnityEngine.Networking.Match.NetworkMatch.ResponseDelegate<UnityEngine.Networking.Match.JoinMatchResponse>), func) as UnityEngine.Networking.Match.NetworkMatch.ResponseDelegate<UnityEngine.Networking.Match.JoinMatchResponse>;
				}

				UnityEngine.Coroutine o = obj.JoinMatch(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Networking.Match.NetworkMatch.JoinMatch");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DestroyMatch(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UnityEngine.Networking.Match.NetworkMatch), typeof(UnityEngine.Networking.Match.DestroyMatchRequest), typeof(UnityEngine.Networking.Match.NetworkMatch.ResponseDelegate<UnityEngine.Networking.Match.BasicResponse>)))
			{
				UnityEngine.Networking.Match.NetworkMatch obj = (UnityEngine.Networking.Match.NetworkMatch)ToLua.ToObject(L, 1);
				UnityEngine.Networking.Match.DestroyMatchRequest arg0 = (UnityEngine.Networking.Match.DestroyMatchRequest)ToLua.ToObject(L, 2);
				UnityEngine.Networking.Match.NetworkMatch.ResponseDelegate<UnityEngine.Networking.Match.BasicResponse> arg1 = null;
				LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

				if (funcType3 != LuaTypes.LUA_TFUNCTION)
				{
					 arg1 = (UnityEngine.Networking.Match.NetworkMatch.ResponseDelegate<UnityEngine.Networking.Match.BasicResponse>)ToLua.ToObject(L, 3);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 3);
					arg1 = DelegateFactory.CreateDelegate(typeof(UnityEngine.Networking.Match.NetworkMatch.ResponseDelegate<UnityEngine.Networking.Match.BasicResponse>), func) as UnityEngine.Networking.Match.NetworkMatch.ResponseDelegate<UnityEngine.Networking.Match.BasicResponse>;
				}

				UnityEngine.Coroutine o = obj.DestroyMatch(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UnityEngine.Networking.Match.NetworkMatch), typeof(UnityEngine.Networking.Types.NetworkID), typeof(UnityEngine.Networking.Match.NetworkMatch.ResponseDelegate<UnityEngine.Networking.Match.BasicResponse>)))
			{
				UnityEngine.Networking.Match.NetworkMatch obj = (UnityEngine.Networking.Match.NetworkMatch)ToLua.ToObject(L, 1);
				UnityEngine.Networking.Types.NetworkID arg0 = (UnityEngine.Networking.Types.NetworkID)ToLua.ToObject(L, 2);
				UnityEngine.Networking.Match.NetworkMatch.ResponseDelegate<UnityEngine.Networking.Match.BasicResponse> arg1 = null;
				LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

				if (funcType3 != LuaTypes.LUA_TFUNCTION)
				{
					 arg1 = (UnityEngine.Networking.Match.NetworkMatch.ResponseDelegate<UnityEngine.Networking.Match.BasicResponse>)ToLua.ToObject(L, 3);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 3);
					arg1 = DelegateFactory.CreateDelegate(typeof(UnityEngine.Networking.Match.NetworkMatch.ResponseDelegate<UnityEngine.Networking.Match.BasicResponse>), func) as UnityEngine.Networking.Match.NetworkMatch.ResponseDelegate<UnityEngine.Networking.Match.BasicResponse>;
				}

				UnityEngine.Coroutine o = obj.DestroyMatch(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Networking.Match.NetworkMatch.DestroyMatch");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DropConnection(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UnityEngine.Networking.Match.NetworkMatch), typeof(UnityEngine.Networking.Match.DropConnectionRequest), typeof(UnityEngine.Networking.Match.NetworkMatch.ResponseDelegate<UnityEngine.Networking.Match.BasicResponse>)))
			{
				UnityEngine.Networking.Match.NetworkMatch obj = (UnityEngine.Networking.Match.NetworkMatch)ToLua.ToObject(L, 1);
				UnityEngine.Networking.Match.DropConnectionRequest arg0 = (UnityEngine.Networking.Match.DropConnectionRequest)ToLua.ToObject(L, 2);
				UnityEngine.Networking.Match.NetworkMatch.ResponseDelegate<UnityEngine.Networking.Match.BasicResponse> arg1 = null;
				LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

				if (funcType3 != LuaTypes.LUA_TFUNCTION)
				{
					 arg1 = (UnityEngine.Networking.Match.NetworkMatch.ResponseDelegate<UnityEngine.Networking.Match.BasicResponse>)ToLua.ToObject(L, 3);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 3);
					arg1 = DelegateFactory.CreateDelegate(typeof(UnityEngine.Networking.Match.NetworkMatch.ResponseDelegate<UnityEngine.Networking.Match.BasicResponse>), func) as UnityEngine.Networking.Match.NetworkMatch.ResponseDelegate<UnityEngine.Networking.Match.BasicResponse>;
				}

				UnityEngine.Coroutine o = obj.DropConnection(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(UnityEngine.Networking.Match.NetworkMatch), typeof(UnityEngine.Networking.Types.NetworkID), typeof(UnityEngine.Networking.Types.NodeID), typeof(UnityEngine.Networking.Match.NetworkMatch.ResponseDelegate<UnityEngine.Networking.Match.BasicResponse>)))
			{
				UnityEngine.Networking.Match.NetworkMatch obj = (UnityEngine.Networking.Match.NetworkMatch)ToLua.ToObject(L, 1);
				UnityEngine.Networking.Types.NetworkID arg0 = (UnityEngine.Networking.Types.NetworkID)ToLua.ToObject(L, 2);
				UnityEngine.Networking.Types.NodeID arg1 = (UnityEngine.Networking.Types.NodeID)ToLua.ToObject(L, 3);
				UnityEngine.Networking.Match.NetworkMatch.ResponseDelegate<UnityEngine.Networking.Match.BasicResponse> arg2 = null;
				LuaTypes funcType4 = LuaDLL.lua_type(L, 4);

				if (funcType4 != LuaTypes.LUA_TFUNCTION)
				{
					 arg2 = (UnityEngine.Networking.Match.NetworkMatch.ResponseDelegate<UnityEngine.Networking.Match.BasicResponse>)ToLua.ToObject(L, 4);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 4);
					arg2 = DelegateFactory.CreateDelegate(typeof(UnityEngine.Networking.Match.NetworkMatch.ResponseDelegate<UnityEngine.Networking.Match.BasicResponse>), func) as UnityEngine.Networking.Match.NetworkMatch.ResponseDelegate<UnityEngine.Networking.Match.BasicResponse>;
				}

				UnityEngine.Coroutine o = obj.DropConnection(arg0, arg1, arg2);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Networking.Match.NetworkMatch.DropConnection");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ListMatches(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UnityEngine.Networking.Match.NetworkMatch), typeof(UnityEngine.Networking.Match.ListMatchRequest), typeof(UnityEngine.Networking.Match.NetworkMatch.ResponseDelegate<UnityEngine.Networking.Match.ListMatchResponse>)))
			{
				UnityEngine.Networking.Match.NetworkMatch obj = (UnityEngine.Networking.Match.NetworkMatch)ToLua.ToObject(L, 1);
				UnityEngine.Networking.Match.ListMatchRequest arg0 = (UnityEngine.Networking.Match.ListMatchRequest)ToLua.ToObject(L, 2);
				UnityEngine.Networking.Match.NetworkMatch.ResponseDelegate<UnityEngine.Networking.Match.ListMatchResponse> arg1 = null;
				LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

				if (funcType3 != LuaTypes.LUA_TFUNCTION)
				{
					 arg1 = (UnityEngine.Networking.Match.NetworkMatch.ResponseDelegate<UnityEngine.Networking.Match.ListMatchResponse>)ToLua.ToObject(L, 3);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 3);
					arg1 = DelegateFactory.CreateDelegate(typeof(UnityEngine.Networking.Match.NetworkMatch.ResponseDelegate<UnityEngine.Networking.Match.ListMatchResponse>), func) as UnityEngine.Networking.Match.NetworkMatch.ResponseDelegate<UnityEngine.Networking.Match.ListMatchResponse>;
				}

				UnityEngine.Coroutine o = obj.ListMatches(arg0, arg1);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 5 && TypeChecker.CheckTypes(L, 1, typeof(UnityEngine.Networking.Match.NetworkMatch), typeof(int), typeof(int), typeof(string), typeof(UnityEngine.Networking.Match.NetworkMatch.ResponseDelegate<UnityEngine.Networking.Match.ListMatchResponse>)))
			{
				UnityEngine.Networking.Match.NetworkMatch obj = (UnityEngine.Networking.Match.NetworkMatch)ToLua.ToObject(L, 1);
				int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				string arg2 = ToLua.ToString(L, 4);
				UnityEngine.Networking.Match.NetworkMatch.ResponseDelegate<UnityEngine.Networking.Match.ListMatchResponse> arg3 = null;
				LuaTypes funcType5 = LuaDLL.lua_type(L, 5);

				if (funcType5 != LuaTypes.LUA_TFUNCTION)
				{
					 arg3 = (UnityEngine.Networking.Match.NetworkMatch.ResponseDelegate<UnityEngine.Networking.Match.ListMatchResponse>)ToLua.ToObject(L, 5);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 5);
					arg3 = DelegateFactory.CreateDelegate(typeof(UnityEngine.Networking.Match.NetworkMatch.ResponseDelegate<UnityEngine.Networking.Match.ListMatchResponse>), func) as UnityEngine.Networking.Match.NetworkMatch.ResponseDelegate<UnityEngine.Networking.Match.ListMatchResponse>;
				}

				UnityEngine.Coroutine o = obj.ListMatches(arg0, arg1, arg2, arg3);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Networking.Match.NetworkMatch.ListMatches");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_baseUri(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Networking.Match.NetworkMatch obj = (UnityEngine.Networking.Match.NetworkMatch)o;
			System.Uri ret = obj.baseUri;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index baseUri on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_baseUri(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Networking.Match.NetworkMatch obj = (UnityEngine.Networking.Match.NetworkMatch)o;
			System.Uri arg0 = (System.Uri)ToLua.CheckObject(L, 2, typeof(System.Uri));
			obj.baseUri = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index baseUri on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnityEngine_Networking_Match_NetworkMatch_ResponseDelegate_UnityEngine_Networking_Match_CreateMatchResponse(IntPtr L)
	{
		try

		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(UnityEngine.Networking.Match.NetworkMatch.ResponseDelegate<UnityEngine.Networking.Match.CreateMatchResponse>), func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(UnityEngine.Networking.Match.NetworkMatch.ResponseDelegate<UnityEngine.Networking.Match.CreateMatchResponse>), func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnityEngine_Networking_Match_NetworkMatch_ResponseDelegate_UnityEngine_Networking_Match_JoinMatchResponse(IntPtr L)
	{
		try

		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(UnityEngine.Networking.Match.NetworkMatch.ResponseDelegate<UnityEngine.Networking.Match.JoinMatchResponse>), func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(UnityEngine.Networking.Match.NetworkMatch.ResponseDelegate<UnityEngine.Networking.Match.JoinMatchResponse>), func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnityEngine_Networking_Match_NetworkMatch_ResponseDelegate_UnityEngine_Networking_Match_BasicResponse(IntPtr L)
	{
		try

		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(UnityEngine.Networking.Match.NetworkMatch.ResponseDelegate<UnityEngine.Networking.Match.BasicResponse>), func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(UnityEngine.Networking.Match.NetworkMatch.ResponseDelegate<UnityEngine.Networking.Match.BasicResponse>), func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UnityEngine_Networking_Match_NetworkMatch_ResponseDelegate_UnityEngine_Networking_Match_ListMatchResponse(IntPtr L)
	{
		try

		{
			int count = LuaDLL.lua_gettop(L);
			LuaFunction func = ToLua.CheckLuaFunction(L, 1);

			if (count == 1)
			{
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(UnityEngine.Networking.Match.NetworkMatch.ResponseDelegate<UnityEngine.Networking.Match.ListMatchResponse>), func);
				ToLua.Push(L, arg1);
			}
			else
			{
				LuaTable self = ToLua.CheckLuaTable(L, 2);
				Delegate arg1 = DelegateFactory.CreateDelegate(typeof(UnityEngine.Networking.Match.NetworkMatch.ResponseDelegate<UnityEngine.Networking.Match.ListMatchResponse>), func, self);
				ToLua.Push(L, arg1);
			}
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

