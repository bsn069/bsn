//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityEngine_GUILayout_AreaScopeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UnityEngine.GUILayout.AreaScope), typeof(UnityEngine.GUI.Scope));
		L.RegFunction("New", _CreateUnityEngine_GUILayout_AreaScope);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateUnityEngine_GUILayout_AreaScope(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityEngine.Rect arg0 = (UnityEngine.Rect)ToLua.CheckObject(L, 1, typeof(UnityEngine.Rect));
				UnityEngine.GUILayout.AreaScope obj = new UnityEngine.GUILayout.AreaScope(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UnityEngine.Rect), typeof(UnityEngine.GUIContent)))
			{
				UnityEngine.Rect arg0 = (UnityEngine.Rect)ToLua.CheckObject(L, 1, typeof(UnityEngine.Rect));
				UnityEngine.GUIContent arg1 = (UnityEngine.GUIContent)ToLua.CheckObject(L, 2, typeof(UnityEngine.GUIContent));
				UnityEngine.GUILayout.AreaScope obj = new UnityEngine.GUILayout.AreaScope(arg0, arg1);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UnityEngine.Rect), typeof(UnityEngine.Texture)))
			{
				UnityEngine.Rect arg0 = (UnityEngine.Rect)ToLua.CheckObject(L, 1, typeof(UnityEngine.Rect));
				UnityEngine.Texture arg1 = (UnityEngine.Texture)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Texture));
				UnityEngine.GUILayout.AreaScope obj = new UnityEngine.GUILayout.AreaScope(arg0, arg1);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UnityEngine.Rect), typeof(string)))
			{
				UnityEngine.Rect arg0 = (UnityEngine.Rect)ToLua.CheckObject(L, 1, typeof(UnityEngine.Rect));
				string arg1 = ToLua.CheckString(L, 2);
				UnityEngine.GUILayout.AreaScope obj = new UnityEngine.GUILayout.AreaScope(arg0, arg1);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UnityEngine.Rect), typeof(UnityEngine.GUIContent), typeof(UnityEngine.GUIStyle)))
			{
				UnityEngine.Rect arg0 = (UnityEngine.Rect)ToLua.CheckObject(L, 1, typeof(UnityEngine.Rect));
				UnityEngine.GUIContent arg1 = (UnityEngine.GUIContent)ToLua.CheckObject(L, 2, typeof(UnityEngine.GUIContent));
				UnityEngine.GUIStyle arg2 = (UnityEngine.GUIStyle)ToLua.CheckObject(L, 3, typeof(UnityEngine.GUIStyle));
				UnityEngine.GUILayout.AreaScope obj = new UnityEngine.GUILayout.AreaScope(arg0, arg1, arg2);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UnityEngine.Rect), typeof(UnityEngine.Texture), typeof(UnityEngine.GUIStyle)))
			{
				UnityEngine.Rect arg0 = (UnityEngine.Rect)ToLua.CheckObject(L, 1, typeof(UnityEngine.Rect));
				UnityEngine.Texture arg1 = (UnityEngine.Texture)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Texture));
				UnityEngine.GUIStyle arg2 = (UnityEngine.GUIStyle)ToLua.CheckObject(L, 3, typeof(UnityEngine.GUIStyle));
				UnityEngine.GUILayout.AreaScope obj = new UnityEngine.GUILayout.AreaScope(arg0, arg1, arg2);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UnityEngine.Rect), typeof(string), typeof(UnityEngine.GUIStyle)))
			{
				UnityEngine.Rect arg0 = (UnityEngine.Rect)ToLua.CheckObject(L, 1, typeof(UnityEngine.Rect));
				string arg1 = ToLua.CheckString(L, 2);
				UnityEngine.GUIStyle arg2 = (UnityEngine.GUIStyle)ToLua.CheckObject(L, 3, typeof(UnityEngine.GUIStyle));
				UnityEngine.GUILayout.AreaScope obj = new UnityEngine.GUILayout.AreaScope(arg0, arg1, arg2);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: UnityEngine.GUILayout.AreaScope.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

