//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityEngine_Rendering_ColorWriteMaskWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(UnityEngine.Rendering.ColorWriteMask));
		L.RegVar("Alpha", get_Alpha, null);
		L.RegVar("Blue", get_Blue, null);
		L.RegVar("Green", get_Green, null);
		L.RegVar("Red", get_Red, null);
		L.RegVar("All", get_All, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Alpha(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.Rendering.ColorWriteMask.Alpha);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Blue(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.Rendering.ColorWriteMask.Blue);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Green(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.Rendering.ColorWriteMask.Green);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Red(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.Rendering.ColorWriteMask.Red);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_All(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.Rendering.ColorWriteMask.All);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		UnityEngine.Rendering.ColorWriteMask o = (UnityEngine.Rendering.ColorWriteMask)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

