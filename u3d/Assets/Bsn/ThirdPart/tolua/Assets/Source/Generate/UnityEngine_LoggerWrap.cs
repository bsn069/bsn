//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityEngine_LoggerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UnityEngine.Logger), typeof(System.Object));
		L.RegFunction("IsLogTypeAllowed", IsLogTypeAllowed);
		L.RegFunction("Log", Log);
		L.RegFunction("LogWarning", LogWarning);
		L.RegFunction("LogError", LogError);
		L.RegFunction("LogFormat", LogFormat);
		L.RegFunction("LogException", LogException);
		L.RegFunction("New", _CreateUnityEngine_Logger);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("logHandler", get_logHandler, set_logHandler);
		L.RegVar("logEnabled", get_logEnabled, set_logEnabled);
		L.RegVar("filterLogType", get_filterLogType, set_filterLogType);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateUnityEngine_Logger(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				UnityEngine.ILogHandler arg0 = (UnityEngine.ILogHandler)ToLua.CheckObject(L, 1, typeof(UnityEngine.ILogHandler));
				UnityEngine.Logger obj = new UnityEngine.Logger(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: UnityEngine.Logger.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsLogTypeAllowed(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Logger obj = (UnityEngine.Logger)ToLua.CheckObject(L, 1, typeof(UnityEngine.Logger));
			UnityEngine.LogType arg0 = (UnityEngine.LogType)ToLua.CheckObject(L, 2, typeof(UnityEngine.LogType));
			bool o = obj.IsLogTypeAllowed(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Log(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UnityEngine.Logger), typeof(object)))
			{
				UnityEngine.Logger obj = (UnityEngine.Logger)ToLua.ToObject(L, 1);
				object arg0 = ToLua.ToVarObject(L, 2);
				obj.Log(arg0);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UnityEngine.Logger), typeof(string), typeof(object)))
			{
				UnityEngine.Logger obj = (UnityEngine.Logger)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				object arg1 = ToLua.ToVarObject(L, 3);
				obj.Log(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UnityEngine.Logger), typeof(UnityEngine.LogType), typeof(object)))
			{
				UnityEngine.Logger obj = (UnityEngine.Logger)ToLua.ToObject(L, 1);
				UnityEngine.LogType arg0 = (UnityEngine.LogType)ToLua.ToObject(L, 2);
				object arg1 = ToLua.ToVarObject(L, 3);
				obj.Log(arg0, arg1);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(UnityEngine.Logger), typeof(UnityEngine.LogType), typeof(string), typeof(object)))
			{
				UnityEngine.Logger obj = (UnityEngine.Logger)ToLua.ToObject(L, 1);
				UnityEngine.LogType arg0 = (UnityEngine.LogType)ToLua.ToObject(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				object arg2 = ToLua.ToVarObject(L, 4);
				obj.Log(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(UnityEngine.Logger), typeof(UnityEngine.LogType), typeof(object), typeof(UnityEngine.Object)))
			{
				UnityEngine.Logger obj = (UnityEngine.Logger)ToLua.ToObject(L, 1);
				UnityEngine.LogType arg0 = (UnityEngine.LogType)ToLua.ToObject(L, 2);
				object arg1 = ToLua.ToVarObject(L, 3);
				UnityEngine.Object arg2 = (UnityEngine.Object)ToLua.ToObject(L, 4);
				obj.Log(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(UnityEngine.Logger), typeof(string), typeof(object), typeof(UnityEngine.Object)))
			{
				UnityEngine.Logger obj = (UnityEngine.Logger)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				object arg1 = ToLua.ToVarObject(L, 3);
				UnityEngine.Object arg2 = (UnityEngine.Object)ToLua.ToObject(L, 4);
				obj.Log(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5 && TypeChecker.CheckTypes(L, 1, typeof(UnityEngine.Logger), typeof(UnityEngine.LogType), typeof(string), typeof(object), typeof(UnityEngine.Object)))
			{
				UnityEngine.Logger obj = (UnityEngine.Logger)ToLua.ToObject(L, 1);
				UnityEngine.LogType arg0 = (UnityEngine.LogType)ToLua.ToObject(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				object arg2 = ToLua.ToVarObject(L, 4);
				UnityEngine.Object arg3 = (UnityEngine.Object)ToLua.ToObject(L, 5);
				obj.Log(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Logger.Log");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LogWarning(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UnityEngine.Logger), typeof(string), typeof(object)))
			{
				UnityEngine.Logger obj = (UnityEngine.Logger)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				object arg1 = ToLua.ToVarObject(L, 3);
				obj.LogWarning(arg0, arg1);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(UnityEngine.Logger), typeof(string), typeof(object), typeof(UnityEngine.Object)))
			{
				UnityEngine.Logger obj = (UnityEngine.Logger)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				object arg1 = ToLua.ToVarObject(L, 3);
				UnityEngine.Object arg2 = (UnityEngine.Object)ToLua.ToObject(L, 4);
				obj.LogWarning(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Logger.LogWarning");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LogError(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UnityEngine.Logger), typeof(string), typeof(object)))
			{
				UnityEngine.Logger obj = (UnityEngine.Logger)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				object arg1 = ToLua.ToVarObject(L, 3);
				obj.LogError(arg0, arg1);
				return 0;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(UnityEngine.Logger), typeof(string), typeof(object), typeof(UnityEngine.Object)))
			{
				UnityEngine.Logger obj = (UnityEngine.Logger)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				object arg1 = ToLua.ToVarObject(L, 3);
				UnityEngine.Object arg2 = (UnityEngine.Object)ToLua.ToObject(L, 4);
				obj.LogError(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Logger.LogError");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LogFormat(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (TypeChecker.CheckTypes(L, 1, typeof(UnityEngine.Logger), typeof(UnityEngine.LogType), typeof(UnityEngine.Object), typeof(string)) && TypeChecker.CheckParamsType(L, typeof(object), 5, count - 4))
			{
				UnityEngine.Logger obj = (UnityEngine.Logger)ToLua.ToObject(L, 1);
				UnityEngine.LogType arg0 = (UnityEngine.LogType)ToLua.ToObject(L, 2);
				UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 3);
				string arg2 = ToLua.ToString(L, 4);
				object[] arg3 = ToLua.ToParamsObject(L, 5, count - 4);
				obj.LogFormat(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (TypeChecker.CheckTypes(L, 1, typeof(UnityEngine.Logger), typeof(UnityEngine.LogType), typeof(string)) && TypeChecker.CheckParamsType(L, typeof(object), 4, count - 3))
			{
				UnityEngine.Logger obj = (UnityEngine.Logger)ToLua.ToObject(L, 1);
				UnityEngine.LogType arg0 = (UnityEngine.LogType)ToLua.ToObject(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				object[] arg2 = ToLua.ToParamsObject(L, 4, count - 3);
				obj.LogFormat(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Logger.LogFormat");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LogException(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UnityEngine.Logger), typeof(System.Exception)))
			{
				UnityEngine.Logger obj = (UnityEngine.Logger)ToLua.ToObject(L, 1);
				System.Exception arg0 = (System.Exception)ToLua.ToObject(L, 2);
				obj.LogException(arg0);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UnityEngine.Logger), typeof(System.Exception), typeof(UnityEngine.Object)))
			{
				UnityEngine.Logger obj = (UnityEngine.Logger)ToLua.ToObject(L, 1);
				System.Exception arg0 = (System.Exception)ToLua.ToObject(L, 2);
				UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 3);
				obj.LogException(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Logger.LogException");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_logHandler(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Logger obj = (UnityEngine.Logger)o;
			UnityEngine.ILogHandler ret = obj.logHandler;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index logHandler on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_logEnabled(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Logger obj = (UnityEngine.Logger)o;
			bool ret = obj.logEnabled;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index logEnabled on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_filterLogType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Logger obj = (UnityEngine.Logger)o;
			UnityEngine.LogType ret = obj.filterLogType;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index filterLogType on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_logHandler(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Logger obj = (UnityEngine.Logger)o;
			UnityEngine.ILogHandler arg0 = (UnityEngine.ILogHandler)ToLua.CheckObject(L, 2, typeof(UnityEngine.ILogHandler));
			obj.logHandler = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index logHandler on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_logEnabled(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Logger obj = (UnityEngine.Logger)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.logEnabled = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index logEnabled on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_filterLogType(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Logger obj = (UnityEngine.Logger)o;
			UnityEngine.LogType arg0 = (UnityEngine.LogType)ToLua.CheckObject(L, 2, typeof(UnityEngine.LogType));
			obj.filterLogType = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index filterLogType on a nil value" : e.Message);
		}
	}
}

