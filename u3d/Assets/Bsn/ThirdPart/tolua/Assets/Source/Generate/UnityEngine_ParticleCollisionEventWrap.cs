//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityEngine_ParticleCollisionEventWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UnityEngine.ParticleCollisionEvent), null);
		L.RegFunction("New", _CreateUnityEngine_ParticleCollisionEvent);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("intersection", get_intersection, null);
		L.RegVar("normal", get_normal, null);
		L.RegVar("velocity", get_velocity, null);
		L.RegVar("colliderComponent", get_colliderComponent, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateUnityEngine_ParticleCollisionEvent(IntPtr L)
	{
		UnityEngine.ParticleCollisionEvent obj = new UnityEngine.ParticleCollisionEvent();
		ToLua.PushValue(L, obj);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_intersection(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleCollisionEvent obj = (UnityEngine.ParticleCollisionEvent)o;
			UnityEngine.Vector3 ret = obj.intersection;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index intersection on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_normal(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleCollisionEvent obj = (UnityEngine.ParticleCollisionEvent)o;
			UnityEngine.Vector3 ret = obj.normal;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index normal on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_velocity(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleCollisionEvent obj = (UnityEngine.ParticleCollisionEvent)o;
			UnityEngine.Vector3 ret = obj.velocity;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index velocity on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_colliderComponent(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.ParticleCollisionEvent obj = (UnityEngine.ParticleCollisionEvent)o;
			UnityEngine.Component ret = obj.colliderComponent;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index colliderComponent on a nil value" : e.Message);
		}
	}
}

