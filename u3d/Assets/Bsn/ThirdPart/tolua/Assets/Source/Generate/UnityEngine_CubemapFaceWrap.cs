//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityEngine_CubemapFaceWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(UnityEngine.CubemapFace));
		L.RegVar("Unknown", get_Unknown, null);
		L.RegVar("PositiveX", get_PositiveX, null);
		L.RegVar("NegativeX", get_NegativeX, null);
		L.RegVar("PositiveY", get_PositiveY, null);
		L.RegVar("NegativeY", get_NegativeY, null);
		L.RegVar("PositiveZ", get_PositiveZ, null);
		L.RegVar("NegativeZ", get_NegativeZ, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Unknown(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.CubemapFace.Unknown);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PositiveX(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.CubemapFace.PositiveX);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NegativeX(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.CubemapFace.NegativeX);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PositiveY(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.CubemapFace.PositiveY);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NegativeY(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.CubemapFace.NegativeY);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_PositiveZ(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.CubemapFace.PositiveZ);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_NegativeZ(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.CubemapFace.NegativeZ);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		UnityEngine.CubemapFace o = (UnityEngine.CubemapFace)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

