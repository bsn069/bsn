//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityEngine_Networking_Match_MatchInfoWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UnityEngine.Networking.Match.MatchInfo), typeof(System.Object));
		L.RegFunction("ToString", ToString);
		L.RegFunction("New", _CreateUnityEngine_Networking_Match_MatchInfo);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("address", get_address, null);
		L.RegVar("port", get_port, null);
		L.RegVar("networkId", get_networkId, null);
		L.RegVar("accessToken", get_accessToken, null);
		L.RegVar("nodeId", get_nodeId, null);
		L.RegVar("usingRelay", get_usingRelay, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateUnityEngine_Networking_Match_MatchInfo(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(UnityEngine.Networking.Match.JoinMatchResponse)))
			{
				UnityEngine.Networking.Match.JoinMatchResponse arg0 = (UnityEngine.Networking.Match.JoinMatchResponse)ToLua.CheckObject(L, 1, typeof(UnityEngine.Networking.Match.JoinMatchResponse));
				UnityEngine.Networking.Match.MatchInfo obj = new UnityEngine.Networking.Match.MatchInfo(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(UnityEngine.Networking.Match.CreateMatchResponse)))
			{
				UnityEngine.Networking.Match.CreateMatchResponse arg0 = (UnityEngine.Networking.Match.CreateMatchResponse)ToLua.CheckObject(L, 1, typeof(UnityEngine.Networking.Match.CreateMatchResponse));
				UnityEngine.Networking.Match.MatchInfo obj = new UnityEngine.Networking.Match.MatchInfo(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: UnityEngine.Networking.Match.MatchInfo.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.Networking.Match.MatchInfo obj = (UnityEngine.Networking.Match.MatchInfo)ToLua.CheckObject(L, 1, typeof(UnityEngine.Networking.Match.MatchInfo));
			string o = obj.ToString();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_address(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Networking.Match.MatchInfo obj = (UnityEngine.Networking.Match.MatchInfo)o;
			string ret = obj.address;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index address on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_port(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Networking.Match.MatchInfo obj = (UnityEngine.Networking.Match.MatchInfo)o;
			int ret = obj.port;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index port on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_networkId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Networking.Match.MatchInfo obj = (UnityEngine.Networking.Match.MatchInfo)o;
			UnityEngine.Networking.Types.NetworkID ret = obj.networkId;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index networkId on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_accessToken(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Networking.Match.MatchInfo obj = (UnityEngine.Networking.Match.MatchInfo)o;
			UnityEngine.Networking.Types.NetworkAccessToken ret = obj.accessToken;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index accessToken on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_nodeId(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Networking.Match.MatchInfo obj = (UnityEngine.Networking.Match.MatchInfo)o;
			UnityEngine.Networking.Types.NodeID ret = obj.nodeId;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index nodeId on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_usingRelay(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Networking.Match.MatchInfo obj = (UnityEngine.Networking.Match.MatchInfo)o;
			bool ret = obj.usingRelay;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index usingRelay on a nil value" : e.Message);
		}
	}
}

