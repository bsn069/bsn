//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityEngine_Rendering_BlendOpWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(UnityEngine.Rendering.BlendOp));
		L.RegVar("Add", get_Add, null);
		L.RegVar("Subtract", get_Subtract, null);
		L.RegVar("ReverseSubtract", get_ReverseSubtract, null);
		L.RegVar("Min", get_Min, null);
		L.RegVar("Max", get_Max, null);
		L.RegVar("LogicalClear", get_LogicalClear, null);
		L.RegVar("LogicalSet", get_LogicalSet, null);
		L.RegVar("LogicalCopy", get_LogicalCopy, null);
		L.RegVar("LogicalCopyInverted", get_LogicalCopyInverted, null);
		L.RegVar("LogicalNoop", get_LogicalNoop, null);
		L.RegVar("LogicalInvert", get_LogicalInvert, null);
		L.RegVar("LogicalAnd", get_LogicalAnd, null);
		L.RegVar("LogicalNand", get_LogicalNand, null);
		L.RegVar("LogicalOr", get_LogicalOr, null);
		L.RegVar("LogicalNor", get_LogicalNor, null);
		L.RegVar("LogicalXor", get_LogicalXor, null);
		L.RegVar("LogicalEquivalence", get_LogicalEquivalence, null);
		L.RegVar("LogicalAndReverse", get_LogicalAndReverse, null);
		L.RegVar("LogicalAndInverted", get_LogicalAndInverted, null);
		L.RegVar("LogicalOrReverse", get_LogicalOrReverse, null);
		L.RegVar("LogicalOrInverted", get_LogicalOrInverted, null);
		L.RegVar("Multiply", get_Multiply, null);
		L.RegVar("Screen", get_Screen, null);
		L.RegVar("Overlay", get_Overlay, null);
		L.RegVar("Darken", get_Darken, null);
		L.RegVar("Lighten", get_Lighten, null);
		L.RegVar("ColorDodge", get_ColorDodge, null);
		L.RegVar("ColorBurn", get_ColorBurn, null);
		L.RegVar("HardLight", get_HardLight, null);
		L.RegVar("SoftLight", get_SoftLight, null);
		L.RegVar("Difference", get_Difference, null);
		L.RegVar("Exclusion", get_Exclusion, null);
		L.RegVar("HSLHue", get_HSLHue, null);
		L.RegVar("HSLSaturation", get_HSLSaturation, null);
		L.RegVar("HSLColor", get_HSLColor, null);
		L.RegVar("HSLLuminosity", get_HSLLuminosity, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Add(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.Rendering.BlendOp.Add);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Subtract(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.Rendering.BlendOp.Subtract);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ReverseSubtract(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.Rendering.BlendOp.ReverseSubtract);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Min(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.Rendering.BlendOp.Min);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Max(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.Rendering.BlendOp.Max);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LogicalClear(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.Rendering.BlendOp.LogicalClear);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LogicalSet(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.Rendering.BlendOp.LogicalSet);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LogicalCopy(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.Rendering.BlendOp.LogicalCopy);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LogicalCopyInverted(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.Rendering.BlendOp.LogicalCopyInverted);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LogicalNoop(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.Rendering.BlendOp.LogicalNoop);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LogicalInvert(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.Rendering.BlendOp.LogicalInvert);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LogicalAnd(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.Rendering.BlendOp.LogicalAnd);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LogicalNand(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.Rendering.BlendOp.LogicalNand);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LogicalOr(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.Rendering.BlendOp.LogicalOr);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LogicalNor(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.Rendering.BlendOp.LogicalNor);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LogicalXor(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.Rendering.BlendOp.LogicalXor);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LogicalEquivalence(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.Rendering.BlendOp.LogicalEquivalence);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LogicalAndReverse(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.Rendering.BlendOp.LogicalAndReverse);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LogicalAndInverted(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.Rendering.BlendOp.LogicalAndInverted);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LogicalOrReverse(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.Rendering.BlendOp.LogicalOrReverse);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_LogicalOrInverted(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.Rendering.BlendOp.LogicalOrInverted);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Multiply(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.Rendering.BlendOp.Multiply);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Screen(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.Rendering.BlendOp.Screen);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Overlay(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.Rendering.BlendOp.Overlay);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Darken(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.Rendering.BlendOp.Darken);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Lighten(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.Rendering.BlendOp.Lighten);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ColorDodge(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.Rendering.BlendOp.ColorDodge);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ColorBurn(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.Rendering.BlendOp.ColorBurn);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HardLight(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.Rendering.BlendOp.HardLight);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SoftLight(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.Rendering.BlendOp.SoftLight);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Difference(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.Rendering.BlendOp.Difference);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Exclusion(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.Rendering.BlendOp.Exclusion);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HSLHue(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.Rendering.BlendOp.HSLHue);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HSLSaturation(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.Rendering.BlendOp.HSLSaturation);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HSLColor(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.Rendering.BlendOp.HSLColor);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HSLLuminosity(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.Rendering.BlendOp.HSLLuminosity);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		UnityEngine.Rendering.BlendOp o = (UnityEngine.Rendering.BlendOp)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

