//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityEngine_Networking_HostTopologyWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UnityEngine.Networking.HostTopology), typeof(System.Object));
		L.RegFunction("GetSpecialConnectionConfig", GetSpecialConnectionConfig);
		L.RegFunction("AddSpecialConnectionConfig", AddSpecialConnectionConfig);
		L.RegFunction("New", _CreateUnityEngine_Networking_HostTopology);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("DefaultConfig", get_DefaultConfig, null);
		L.RegVar("MaxDefaultConnections", get_MaxDefaultConnections, null);
		L.RegVar("SpecialConnectionConfigsCount", get_SpecialConnectionConfigsCount, null);
		L.RegVar("SpecialConnectionConfigs", get_SpecialConnectionConfigs, null);
		L.RegVar("ReceivedMessagePoolSize", get_ReceivedMessagePoolSize, set_ReceivedMessagePoolSize);
		L.RegVar("SentMessagePoolSize", get_SentMessagePoolSize, set_SentMessagePoolSize);
		L.RegVar("MessagePoolSizeGrowthFactor", get_MessagePoolSizeGrowthFactor, set_MessagePoolSizeGrowthFactor);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateUnityEngine_Networking_HostTopology(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				UnityEngine.Networking.ConnectionConfig arg0 = (UnityEngine.Networking.ConnectionConfig)ToLua.CheckObject(L, 1, typeof(UnityEngine.Networking.ConnectionConfig));
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
				UnityEngine.Networking.HostTopology obj = new UnityEngine.Networking.HostTopology(arg0, arg1);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: UnityEngine.Networking.HostTopology.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSpecialConnectionConfig(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Networking.HostTopology obj = (UnityEngine.Networking.HostTopology)ToLua.CheckObject(L, 1, typeof(UnityEngine.Networking.HostTopology));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Networking.ConnectionConfig o = obj.GetSpecialConnectionConfig(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddSpecialConnectionConfig(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Networking.HostTopology obj = (UnityEngine.Networking.HostTopology)ToLua.CheckObject(L, 1, typeof(UnityEngine.Networking.HostTopology));
			UnityEngine.Networking.ConnectionConfig arg0 = (UnityEngine.Networking.ConnectionConfig)ToLua.CheckObject(L, 2, typeof(UnityEngine.Networking.ConnectionConfig));
			int o = obj.AddSpecialConnectionConfig(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_DefaultConfig(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Networking.HostTopology obj = (UnityEngine.Networking.HostTopology)o;
			UnityEngine.Networking.ConnectionConfig ret = obj.DefaultConfig;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index DefaultConfig on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MaxDefaultConnections(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Networking.HostTopology obj = (UnityEngine.Networking.HostTopology)o;
			int ret = obj.MaxDefaultConnections;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index MaxDefaultConnections on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SpecialConnectionConfigsCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Networking.HostTopology obj = (UnityEngine.Networking.HostTopology)o;
			int ret = obj.SpecialConnectionConfigsCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index SpecialConnectionConfigsCount on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SpecialConnectionConfigs(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Networking.HostTopology obj = (UnityEngine.Networking.HostTopology)o;
			System.Collections.Generic.List<UnityEngine.Networking.ConnectionConfig> ret = obj.SpecialConnectionConfigs;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index SpecialConnectionConfigs on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_ReceivedMessagePoolSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Networking.HostTopology obj = (UnityEngine.Networking.HostTopology)o;
			ushort ret = obj.ReceivedMessagePoolSize;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ReceivedMessagePoolSize on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_SentMessagePoolSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Networking.HostTopology obj = (UnityEngine.Networking.HostTopology)o;
			ushort ret = obj.SentMessagePoolSize;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index SentMessagePoolSize on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_MessagePoolSizeGrowthFactor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Networking.HostTopology obj = (UnityEngine.Networking.HostTopology)o;
			float ret = obj.MessagePoolSizeGrowthFactor;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index MessagePoolSizeGrowthFactor on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_ReceivedMessagePoolSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Networking.HostTopology obj = (UnityEngine.Networking.HostTopology)o;
			ushort arg0 = (ushort)LuaDLL.luaL_checknumber(L, 2);
			obj.ReceivedMessagePoolSize = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index ReceivedMessagePoolSize on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_SentMessagePoolSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Networking.HostTopology obj = (UnityEngine.Networking.HostTopology)o;
			ushort arg0 = (ushort)LuaDLL.luaL_checknumber(L, 2);
			obj.SentMessagePoolSize = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index SentMessagePoolSize on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_MessagePoolSizeGrowthFactor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Networking.HostTopology obj = (UnityEngine.Networking.HostTopology)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.MessagePoolSizeGrowthFactor = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index MessagePoolSizeGrowthFactor on a nil value" : e.Message);
		}
	}
}

