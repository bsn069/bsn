//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityEngine_Networking_NetworkTransportWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UnityEngine.Networking.NetworkTransport), typeof(System.Object));
		L.RegFunction("ConnectEndPoint", ConnectEndPoint);
		L.RegFunction("Init", Init);
		L.RegFunction("Shutdown", Shutdown);
		L.RegFunction("GetAssetId", GetAssetId);
		L.RegFunction("AddSceneId", AddSceneId);
		L.RegFunction("GetNextSceneId", GetNextSceneId);
		L.RegFunction("ConnectAsNetworkHost", ConnectAsNetworkHost);
		L.RegFunction("DisconnectNetworkHost", DisconnectNetworkHost);
		L.RegFunction("ReceiveRelayEventFromHost", ReceiveRelayEventFromHost);
		L.RegFunction("ConnectToNetworkPeer", ConnectToNetworkPeer);
		L.RegFunction("GetCurrentIncomingMessageAmount", GetCurrentIncomingMessageAmount);
		L.RegFunction("GetCurrentOutgoingMessageAmount", GetCurrentOutgoingMessageAmount);
		L.RegFunction("GetCurrentRtt", GetCurrentRtt);
		L.RegFunction("GetNetworkLostPacketNum", GetNetworkLostPacketNum);
		L.RegFunction("GetPacketSentRate", GetPacketSentRate);
		L.RegFunction("GetPacketReceivedRate", GetPacketReceivedRate);
		L.RegFunction("GetNetIOTimeuS", GetNetIOTimeuS);
		L.RegFunction("GetConnectionInfo", GetConnectionInfo);
		L.RegFunction("GetNetworkTimestamp", GetNetworkTimestamp);
		L.RegFunction("GetRemoteDelayTimeMS", GetRemoteDelayTimeMS);
		L.RegFunction("StartSendMulticast", StartSendMulticast);
		L.RegFunction("SendMulticast", SendMulticast);
		L.RegFunction("FinishSendMulticast", FinishSendMulticast);
		L.RegFunction("AddWebsocketHost", AddWebsocketHost);
		L.RegFunction("AddHost", AddHost);
		L.RegFunction("AddHostWithSimulator", AddHostWithSimulator);
		L.RegFunction("RemoveHost", RemoveHost);
		L.RegFunction("Connect", Connect);
		L.RegFunction("ConnectWithSimulator", ConnectWithSimulator);
		L.RegFunction("Disconnect", Disconnect);
		L.RegFunction("Send", Send);
		L.RegFunction("Receive", Receive);
		L.RegFunction("ReceiveFromHost", ReceiveFromHost);
		L.RegFunction("SetPacketStat", SetPacketStat);
		L.RegFunction("StartBroadcastDiscovery", StartBroadcastDiscovery);
		L.RegFunction("StopBroadcastDiscovery", StopBroadcastDiscovery);
		L.RegFunction("IsBroadcastDiscoveryRunning", IsBroadcastDiscoveryRunning);
		L.RegFunction("SetBroadcastCredentials", SetBroadcastCredentials);
		L.RegFunction("GetBroadcastConnectionInfo", GetBroadcastConnectionInfo);
		L.RegFunction("GetBroadcastConnectionMessage", GetBroadcastConnectionMessage);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("IsStarted", get_IsStarted, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ConnectEndPoint(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			System.Net.EndPoint arg1 = (System.Net.EndPoint)ToLua.CheckObject(L, 2, typeof(System.Net.EndPoint));
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
			byte arg3;
			int o = UnityEngine.Networking.NetworkTransport.ConnectEndPoint(arg0, arg1, arg2, out arg3);
			LuaDLL.lua_pushinteger(L, o);
			LuaDLL.lua_pushnumber(L, arg3);
			return 2;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Init(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				UnityEngine.Networking.NetworkTransport.Init();
				return 0;
			}
			else if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(UnityEngine.Networking.GlobalConfig)))
			{
				UnityEngine.Networking.GlobalConfig arg0 = (UnityEngine.Networking.GlobalConfig)ToLua.ToObject(L, 1);
				UnityEngine.Networking.NetworkTransport.Init(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Networking.NetworkTransport.Init");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Shutdown(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			UnityEngine.Networking.NetworkTransport.Shutdown();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAssetId(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 1, typeof(UnityEngine.GameObject));
			string o = UnityEngine.Networking.NetworkTransport.GetAssetId(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddSceneId(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			UnityEngine.Networking.NetworkTransport.AddSceneId(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetNextSceneId(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			int o = UnityEngine.Networking.NetworkTransport.GetNextSceneId();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ConnectAsNetworkHost(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 7);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
			UnityEngine.Networking.Types.NetworkID arg3 = (UnityEngine.Networking.Types.NetworkID)ToLua.CheckObject(L, 4, typeof(UnityEngine.Networking.Types.NetworkID));
			UnityEngine.Networking.Types.SourceID arg4 = (UnityEngine.Networking.Types.SourceID)ToLua.CheckObject(L, 5, typeof(UnityEngine.Networking.Types.SourceID));
			UnityEngine.Networking.Types.NodeID arg5 = (UnityEngine.Networking.Types.NodeID)ToLua.CheckObject(L, 6, typeof(UnityEngine.Networking.Types.NodeID));
			byte arg6;
			UnityEngine.Networking.NetworkTransport.ConnectAsNetworkHost(arg0, arg1, arg2, arg3, arg4, arg5, out arg6);
			LuaDLL.lua_pushnumber(L, arg6);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DisconnectNetworkHost(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			byte arg1;
			UnityEngine.Networking.NetworkTransport.DisconnectNetworkHost(arg0, out arg1);
			LuaDLL.lua_pushnumber(L, arg1);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReceiveRelayEventFromHost(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			byte arg1;
			UnityEngine.Networking.NetworkEventType o = UnityEngine.Networking.NetworkTransport.ReceiveRelayEventFromHost(arg0, out arg1);
			ToLua.Push(L, o);
			LuaDLL.lua_pushnumber(L, arg1);
			return 2;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ConnectToNetworkPeer(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 9 && TypeChecker.CheckTypes(L, 1, typeof(int), typeof(string), typeof(int), typeof(int), typeof(int), typeof(UnityEngine.Networking.Types.NetworkID), typeof(UnityEngine.Networking.Types.SourceID), typeof(UnityEngine.Networking.Types.NodeID), typeof(LuaInterface.LuaOut<byte>)))
			{
				int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 3);
				int arg3 = (int)LuaDLL.lua_tonumber(L, 4);
				int arg4 = (int)LuaDLL.lua_tonumber(L, 5);
				UnityEngine.Networking.Types.NetworkID arg5 = (UnityEngine.Networking.Types.NetworkID)ToLua.ToObject(L, 6);
				UnityEngine.Networking.Types.SourceID arg6 = (UnityEngine.Networking.Types.SourceID)ToLua.ToObject(L, 7);
				UnityEngine.Networking.Types.NodeID arg7 = (UnityEngine.Networking.Types.NodeID)ToLua.ToObject(L, 8);
				byte arg8;
				int o = UnityEngine.Networking.NetworkTransport.ConnectToNetworkPeer(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, out arg8);
				LuaDLL.lua_pushinteger(L, o);
				LuaDLL.lua_pushnumber(L, arg8);
				return 2;
			}
			else if (count == 11 && TypeChecker.CheckTypes(L, 1, typeof(int), typeof(string), typeof(int), typeof(int), typeof(int), typeof(UnityEngine.Networking.Types.NetworkID), typeof(UnityEngine.Networking.Types.SourceID), typeof(UnityEngine.Networking.Types.NodeID), typeof(int), typeof(float), typeof(LuaInterface.LuaOut<byte>)))
			{
				int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
				string arg1 = ToLua.ToString(L, 2);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 3);
				int arg3 = (int)LuaDLL.lua_tonumber(L, 4);
				int arg4 = (int)LuaDLL.lua_tonumber(L, 5);
				UnityEngine.Networking.Types.NetworkID arg5 = (UnityEngine.Networking.Types.NetworkID)ToLua.ToObject(L, 6);
				UnityEngine.Networking.Types.SourceID arg6 = (UnityEngine.Networking.Types.SourceID)ToLua.ToObject(L, 7);
				UnityEngine.Networking.Types.NodeID arg7 = (UnityEngine.Networking.Types.NodeID)ToLua.ToObject(L, 8);
				int arg8 = (int)LuaDLL.lua_tonumber(L, 9);
				float arg9 = (float)LuaDLL.lua_tonumber(L, 10);
				byte arg10;
				int o = UnityEngine.Networking.NetworkTransport.ConnectToNetworkPeer(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, out arg10);
				LuaDLL.lua_pushinteger(L, o);
				LuaDLL.lua_pushnumber(L, arg10);
				return 2;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Networking.NetworkTransport.ConnectToNetworkPeer");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCurrentIncomingMessageAmount(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			int o = UnityEngine.Networking.NetworkTransport.GetCurrentIncomingMessageAmount();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCurrentOutgoingMessageAmount(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			int o = UnityEngine.Networking.NetworkTransport.GetCurrentOutgoingMessageAmount();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCurrentRtt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			byte arg2;
			int o = UnityEngine.Networking.NetworkTransport.GetCurrentRtt(arg0, arg1, out arg2);
			LuaDLL.lua_pushinteger(L, o);
			LuaDLL.lua_pushnumber(L, arg2);
			return 2;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetNetworkLostPacketNum(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			byte arg2;
			int o = UnityEngine.Networking.NetworkTransport.GetNetworkLostPacketNum(arg0, arg1, out arg2);
			LuaDLL.lua_pushinteger(L, o);
			LuaDLL.lua_pushnumber(L, arg2);
			return 2;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPacketSentRate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			byte arg2;
			int o = UnityEngine.Networking.NetworkTransport.GetPacketSentRate(arg0, arg1, out arg2);
			LuaDLL.lua_pushinteger(L, o);
			LuaDLL.lua_pushnumber(L, arg2);
			return 2;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPacketReceivedRate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			byte arg2;
			int o = UnityEngine.Networking.NetworkTransport.GetPacketReceivedRate(arg0, arg1, out arg2);
			LuaDLL.lua_pushinteger(L, o);
			LuaDLL.lua_pushnumber(L, arg2);
			return 2;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetNetIOTimeuS(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			int o = UnityEngine.Networking.NetworkTransport.GetNetIOTimeuS();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetConnectionInfo(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 6 && TypeChecker.CheckTypes(L, 1, typeof(int), typeof(int), typeof(LuaInterface.LuaOut<int>), typeof(LuaInterface.LuaOut<ulong>), typeof(LuaInterface.LuaOut<ushort>), typeof(LuaInterface.LuaOut<byte>)))
			{
				int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 2);
				int arg2;
				ulong arg3;
				ushort arg4;
				byte arg5;
				string o = UnityEngine.Networking.NetworkTransport.GetConnectionInfo(arg0, arg1, out arg2, out arg3, out arg4, out arg5);
				LuaDLL.lua_pushstring(L, o);
				LuaDLL.lua_pushinteger(L, arg2);
				LuaDLL.tolua_pushuint64(L, arg3);
				LuaDLL.lua_pushnumber(L, arg4);
				LuaDLL.lua_pushnumber(L, arg5);
				return 5;
			}
			else if (count == 7 && TypeChecker.CheckTypes(L, 1, typeof(int), typeof(int), typeof(LuaInterface.LuaOut<string>), typeof(LuaInterface.LuaOut<int>), typeof(LuaInterface.LuaOut<UnityEngine.Networking.Types.NetworkID>), typeof(LuaInterface.LuaOut<UnityEngine.Networking.Types.NodeID>), typeof(LuaInterface.LuaOut<byte>)))
			{
				int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 2);
				string arg2 = null;
				int arg3;
				UnityEngine.Networking.Types.NetworkID arg4;
				UnityEngine.Networking.Types.NodeID arg5;
				byte arg6;
				UnityEngine.Networking.NetworkTransport.GetConnectionInfo(arg0, arg1, out arg2, out arg3, out arg4, out arg5, out arg6);
				LuaDLL.lua_pushstring(L, arg2);
				LuaDLL.lua_pushinteger(L, arg3);
				ToLua.Push(L, arg4);
				ToLua.Push(L, arg5);
				LuaDLL.lua_pushnumber(L, arg6);
				return 5;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Networking.NetworkTransport.GetConnectionInfo");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetNetworkTimestamp(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			int o = UnityEngine.Networking.NetworkTransport.GetNetworkTimestamp();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRemoteDelayTimeMS(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
			byte arg3;
			int o = UnityEngine.Networking.NetworkTransport.GetRemoteDelayTimeMS(arg0, arg1, arg2, out arg3);
			LuaDLL.lua_pushinteger(L, o);
			LuaDLL.lua_pushnumber(L, arg3);
			return 2;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StartSendMulticast(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			byte[] arg2 = ToLua.CheckByteBuffer(L, 3);
			int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
			byte arg4;
			bool o = UnityEngine.Networking.NetworkTransport.StartSendMulticast(arg0, arg1, arg2, arg3, out arg4);
			LuaDLL.lua_pushboolean(L, o);
			LuaDLL.lua_pushnumber(L, arg4);
			return 2;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SendMulticast(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			byte arg2;
			bool o = UnityEngine.Networking.NetworkTransport.SendMulticast(arg0, arg1, out arg2);
			LuaDLL.lua_pushboolean(L, o);
			LuaDLL.lua_pushnumber(L, arg2);
			return 2;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FinishSendMulticast(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			byte arg1;
			bool o = UnityEngine.Networking.NetworkTransport.FinishSendMulticast(arg0, out arg1);
			LuaDLL.lua_pushboolean(L, o);
			LuaDLL.lua_pushnumber(L, arg1);
			return 2;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddWebsocketHost(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UnityEngine.Networking.HostTopology), typeof(int)))
			{
				UnityEngine.Networking.HostTopology arg0 = (UnityEngine.Networking.HostTopology)ToLua.ToObject(L, 1);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 2);
				int o = UnityEngine.Networking.NetworkTransport.AddWebsocketHost(arg0, arg1);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UnityEngine.Networking.HostTopology), typeof(int), typeof(string)))
			{
				UnityEngine.Networking.HostTopology arg0 = (UnityEngine.Networking.HostTopology)ToLua.ToObject(L, 1);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 2);
				string arg2 = ToLua.ToString(L, 3);
				int o = UnityEngine.Networking.NetworkTransport.AddWebsocketHost(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Networking.NetworkTransport.AddWebsocketHost");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddHost(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(UnityEngine.Networking.HostTopology)))
			{
				UnityEngine.Networking.HostTopology arg0 = (UnityEngine.Networking.HostTopology)ToLua.ToObject(L, 1);
				int o = UnityEngine.Networking.NetworkTransport.AddHost(arg0);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UnityEngine.Networking.HostTopology), typeof(int)))
			{
				UnityEngine.Networking.HostTopology arg0 = (UnityEngine.Networking.HostTopology)ToLua.ToObject(L, 1);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 2);
				int o = UnityEngine.Networking.NetworkTransport.AddHost(arg0, arg1);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UnityEngine.Networking.HostTopology), typeof(int), typeof(string)))
			{
				UnityEngine.Networking.HostTopology arg0 = (UnityEngine.Networking.HostTopology)ToLua.ToObject(L, 1);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 2);
				string arg2 = ToLua.ToString(L, 3);
				int o = UnityEngine.Networking.NetworkTransport.AddHost(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Networking.NetworkTransport.AddHost");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddHostWithSimulator(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UnityEngine.Networking.HostTopology), typeof(int), typeof(int)))
			{
				UnityEngine.Networking.HostTopology arg0 = (UnityEngine.Networking.HostTopology)ToLua.ToObject(L, 1);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 2);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 3);
				int o = UnityEngine.Networking.NetworkTransport.AddHostWithSimulator(arg0, arg1, arg2);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(UnityEngine.Networking.HostTopology), typeof(int), typeof(int), typeof(int)))
			{
				UnityEngine.Networking.HostTopology arg0 = (UnityEngine.Networking.HostTopology)ToLua.ToObject(L, 1);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 2);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 3);
				int arg3 = (int)LuaDLL.lua_tonumber(L, 4);
				int o = UnityEngine.Networking.NetworkTransport.AddHostWithSimulator(arg0, arg1, arg2, arg3);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else if (count == 5 && TypeChecker.CheckTypes(L, 1, typeof(UnityEngine.Networking.HostTopology), typeof(int), typeof(int), typeof(int), typeof(string)))
			{
				UnityEngine.Networking.HostTopology arg0 = (UnityEngine.Networking.HostTopology)ToLua.ToObject(L, 1);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 2);
				int arg2 = (int)LuaDLL.lua_tonumber(L, 3);
				int arg3 = (int)LuaDLL.lua_tonumber(L, 4);
				string arg4 = ToLua.ToString(L, 5);
				int o = UnityEngine.Networking.NetworkTransport.AddHostWithSimulator(arg0, arg1, arg2, arg3, arg4);
				LuaDLL.lua_pushinteger(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Networking.NetworkTransport.AddHostWithSimulator");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveHost(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			bool o = UnityEngine.Networking.NetworkTransport.RemoveHost(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Connect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
			byte arg4;
			int o = UnityEngine.Networking.NetworkTransport.Connect(arg0, arg1, arg2, arg3, out arg4);
			LuaDLL.lua_pushinteger(L, o);
			LuaDLL.lua_pushnumber(L, arg4);
			return 2;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ConnectWithSimulator(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 6);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
			byte arg4;
			UnityEngine.Networking.ConnectionSimulatorConfig arg5 = (UnityEngine.Networking.ConnectionSimulatorConfig)ToLua.CheckObject(L, 6, typeof(UnityEngine.Networking.ConnectionSimulatorConfig));
			int o = UnityEngine.Networking.NetworkTransport.ConnectWithSimulator(arg0, arg1, arg2, arg3, out arg4, arg5);
			LuaDLL.lua_pushinteger(L, o);
			LuaDLL.lua_pushnumber(L, arg4);
			return 2;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Disconnect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			byte arg2;
			bool o = UnityEngine.Networking.NetworkTransport.Disconnect(arg0, arg1, out arg2);
			LuaDLL.lua_pushboolean(L, o);
			LuaDLL.lua_pushnumber(L, arg2);
			return 2;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Send(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 6);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
			byte[] arg3 = ToLua.CheckByteBuffer(L, 4);
			int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
			byte arg5;
			bool o = UnityEngine.Networking.NetworkTransport.Send(arg0, arg1, arg2, arg3, arg4, out arg5);
			LuaDLL.lua_pushboolean(L, o);
			LuaDLL.lua_pushnumber(L, arg5);
			return 2;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Receive(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 7);
			int arg0;
			int arg1;
			int arg2;
			byte[] arg3 = ToLua.CheckByteBuffer(L, 4);
			int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
			int arg5;
			byte arg6;
			UnityEngine.Networking.NetworkEventType o = UnityEngine.Networking.NetworkTransport.Receive(out arg0, out arg1, out arg2, arg3, arg4, out arg5, out arg6);
			ToLua.Push(L, o);
			LuaDLL.lua_pushinteger(L, arg0);
			LuaDLL.lua_pushinteger(L, arg1);
			LuaDLL.lua_pushinteger(L, arg2);
			LuaDLL.lua_pushinteger(L, arg5);
			LuaDLL.lua_pushnumber(L, arg6);
			return 6;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ReceiveFromHost(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 7);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int arg1;
			int arg2;
			byte[] arg3 = ToLua.CheckByteBuffer(L, 4);
			int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
			int arg5;
			byte arg6;
			UnityEngine.Networking.NetworkEventType o = UnityEngine.Networking.NetworkTransport.ReceiveFromHost(arg0, out arg1, out arg2, arg3, arg4, out arg5, out arg6);
			ToLua.Push(L, o);
			LuaDLL.lua_pushinteger(L, arg1);
			LuaDLL.lua_pushinteger(L, arg2);
			LuaDLL.lua_pushinteger(L, arg5);
			LuaDLL.lua_pushnumber(L, arg6);
			return 5;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetPacketStat(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
			UnityEngine.Networking.NetworkTransport.SetPacketStat(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StartBroadcastDiscovery(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 9);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
			int arg4 = (int)LuaDLL.luaL_checknumber(L, 5);
			byte[] arg5 = ToLua.CheckByteBuffer(L, 6);
			int arg6 = (int)LuaDLL.luaL_checknumber(L, 7);
			int arg7 = (int)LuaDLL.luaL_checknumber(L, 8);
			byte arg8;
			bool o = UnityEngine.Networking.NetworkTransport.StartBroadcastDiscovery(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, out arg8);
			LuaDLL.lua_pushboolean(L, o);
			LuaDLL.lua_pushnumber(L, arg8);
			return 2;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StopBroadcastDiscovery(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			UnityEngine.Networking.NetworkTransport.StopBroadcastDiscovery();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsBroadcastDiscoveryRunning(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			bool o = UnityEngine.Networking.NetworkTransport.IsBroadcastDiscoveryRunning();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetBroadcastCredentials(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg3 = (int)LuaDLL.luaL_checknumber(L, 4);
			byte arg4;
			UnityEngine.Networking.NetworkTransport.SetBroadcastCredentials(arg0, arg1, arg2, arg3, out arg4);
			LuaDLL.lua_pushnumber(L, arg4);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBroadcastConnectionInfo(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(int), typeof(LuaInterface.LuaOut<int>), typeof(LuaInterface.LuaOut<byte>)))
			{
				int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
				int arg1;
				byte arg2;
				string o = UnityEngine.Networking.NetworkTransport.GetBroadcastConnectionInfo(arg0, out arg1, out arg2);
				LuaDLL.lua_pushstring(L, o);
				LuaDLL.lua_pushinteger(L, arg1);
				LuaDLL.lua_pushnumber(L, arg2);
				return 3;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(int), typeof(LuaInterface.LuaOut<string>), typeof(LuaInterface.LuaOut<int>), typeof(LuaInterface.LuaOut<byte>)))
			{
				int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
				string arg1 = null;
				int arg2;
				byte arg3;
				UnityEngine.Networking.NetworkTransport.GetBroadcastConnectionInfo(arg0, out arg1, out arg2, out arg3);
				LuaDLL.lua_pushstring(L, arg1);
				LuaDLL.lua_pushinteger(L, arg2);
				LuaDLL.lua_pushnumber(L, arg3);
				return 3;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Networking.NetworkTransport.GetBroadcastConnectionInfo");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBroadcastConnectionMessage(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			byte[] arg1 = ToLua.CheckByteBuffer(L, 2);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg3;
			byte arg4;
			UnityEngine.Networking.NetworkTransport.GetBroadcastConnectionMessage(arg0, arg1, arg2, out arg3, out arg4);
			LuaDLL.lua_pushinteger(L, arg3);
			LuaDLL.lua_pushnumber(L, arg4);
			return 2;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_IsStarted(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, UnityEngine.Networking.NetworkTransport.IsStarted);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

